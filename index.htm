<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ChatLog - Demo HTML</title>
    <style>
        /* --- Contenido de styles.css --- */
        :root {
            --primary-color: #2f008b;
            --accent-color: #ffba28;
            --text-color: #333;
            --text-light: #666;
            --bg-color: #fff;
            --bg-secondary: #f5f5f5;
            --border-color: #ddd;
            --input-bg: #fff;
            --shadow: 0 2px 4px rgba(0,0,0,0.1);
            --chart-color-1: rgba(54, 162, 235, 0.8);
            --chart-color-2: rgba(255, 99, 132, 0.8);
            --chart-color-3: rgba(75, 192, 192, 0.8);
            --chart-color-4: rgba(255, 159, 64, 0.8);
            --chart-color-5: rgba(153, 102, 255, 0.8);
            --chart-color-6: rgba(255, 205, 86, 0.8);
            --chart-color-7: rgba(201, 203, 207, 0.8);
            --chart-color-8: rgba(54, 162, 235, 0.5);
            --chart-color-9: rgba(255, 99, 132, 0.5);
            --chart-color-10: rgba(75, 192, 192, 0.5);
            --danger-color: #e74c3c;
            --star-default: #d4d4d4;
            --star-hover: #ffd700;
            --star-active: #ffba28;
            --success-color: #27ae60;
            --edit-color: #3498db;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Arial, sans-serif;
            color: var(--text-color);
            background-color: var(--bg-color);
            font-size: 14px;
            line-height: 1.5;
            width: 100%;
        }

        .container {
            padding: 16px;
            max-width: 100%;
            /* Añadido para limitar el ancho en pantallas grandes y centrar */
            max-width: 1200px;
            margin: 0 auto;
        }

        /* Encabezado */
        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-bottom: 12px;
            border-bottom: 2px solid var(--primary-color);
            margin-bottom: 16px;
        }

        header h1 {
            color: var(--primary-color);
            font-size: 1.5rem;
        }

        .header-controls {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .storage-info {
            font-size: 0.75rem;
            color: var(--text-light);
        }

        /* Navegación por Pestañas */
        .tab-navigation {
            display: flex;
            gap: 4px;
            margin-bottom: 16px;
            border-bottom: 1px solid var(--border-color);
            flex-wrap: wrap; /* Para que quepa en pantallas pequeñas */
        }

        .tab-button {
            background-color: var(--bg-secondary);
            color: var(--text-color);
            padding: 8px 12px;
            border: 1px solid var(--border-color);
            border-bottom: none;
            border-radius: 4px 4px 0 0;
            cursor: pointer;
            flex-shrink: 0; /* Evita que los botones se encojan demasiado */
        }

        .tab-button:hover {
            background-color: var(--accent-color);
            color: #000;
        }

        .tab-button.active {
            background-color: var(--accent-color);
            color: #000;
            font-weight: bold;
        }

        /* Contenido de pestañas */
        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* Secciones */
        .section {
            background-color: var(--bg-secondary);
            border-radius: 8px;
            margin-bottom: 16px;
            padding: 16px;
            box-shadow: var(--shadow);
        }

        /* Formularios */
        .form-group {
            margin-bottom: 12px;
        }

        label {
            display: block;
            margin-bottom: 4px;
            font-weight: 500;
        }

        input[type="text"],
        input[type="url"],
        textarea,
        select {
            width: 100%;
            padding: 8px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background-color: var(--input-bg);
            font-family: inherit;
            font-size: 1em; /* Asegurar tamaño de fuente consistente */
        }

        /* Evitar zoom en iOS */
        input[type="text"], input[type="url"], textarea, select {
            font-size: 16px;
        }

        button {
            padding: 8px 12px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            font-size: 1em; /* Tamaño consistente */
        }

        button:hover {
            background-color: #3a00b0;
        }

        button:disabled {
            background-color: var(--text-light);
            cursor: not-allowed;
            opacity: 0.7;
        }

        .form-actions {
            margin-top: 16px;
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        /* Gestión de proyectos */
        .project-controls {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            align-items: center;
            margin-bottom: 12px;
        }

        .project-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            align-items: center;
        }

        #project-select {
            min-width: 150px;
        }

        #new-project-name {
            flex-grow: 1;
            min-width: 150px;
        }


        /* Lista de acceso rápido */
        #quick-access-list ul {
            list-style-type: none;
            padding: 0; /* Asegurar que no haya padding */
        }

        #quick-access-list li {
            padding: 8px 12px; /* Aumentar padding vertical */
            margin-bottom: 6px; /* Aumentar espacio */
            border-radius: 4px;
            background-color: var(--bg-color);
            box-shadow: var(--shadow);
            cursor: pointer;
            transition: background-color 0.2s;
            display: flex; /* Para alinear título y estrellas */
            justify-content: space-between; /* Separar título y estrellas */
            align-items: center;
            word-break: break-word; /* Para nombres largos */
        }

        #quick-access-list li:hover {
            background-color: #f0f0f0; /* Color más sutil */
            /* background-color: var(--accent-color); */
            /* color: #000; */
        }

        .list-rating {
             white-space: nowrap; /* Evitar que las estrellas se rompan */
        }

        /* Elementos básicos */
        h2 {
            color: var(--primary-color);
            margin-bottom: 16px;
            font-size: 1.3rem; /* Ligeramente más pequeño */
        }

        h3 {
            color: var(--primary-color);
            margin-bottom: 12px;
            font-size: 1.1rem;
        }

        h4 {
            color: var(--primary-color);
            margin-bottom: 8px;
            font-size: 1rem;
        }

        p {
            margin-bottom: 16px;
        }

        /* Sistema de Etiquetas */
        .tags-container {
            border: 1px solid var(--border-color);
            border-radius: 4px;
            padding: 4px 8px;
            background-color: var(--input-bg);
            display: flex;
            flex-wrap: wrap;
            gap: 6px;
            align-items: center;
            min-height: 38px; /* Ajuste para padding y borde */
            position: relative;
        }

        #tags-list {
            display: flex;
            flex-wrap: wrap;
            gap: 6px;
        }

        .tag-item {
            background-color: var(--primary-color);
            color: white;
            padding: 2px 8px;
            border-radius: 16px;
            font-size: 12px;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .tag-remove {
            cursor: pointer;
            font-weight: bold;
        }

        #tags-input {
            flex: 1;
            min-width: 120px;
            border: none;
            outline: none;
            padding: 4px 0;
            background: transparent;
        }

        .tags-suggestions {
            position: absolute;
            background-color: white;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            max-height: 200px;
            overflow-y: auto;
            width: calc(100% - 2px); /* Ajuste para borde */
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            z-index: 10;
            display: none;
            left: 0;
            top: 100%; /* Posicionar debajo del input */
            margin-top: 2px;
        }

        .suggestion-item {
            padding: 8px 12px;
            cursor: pointer;
        }

        .suggestion-item:hover {
            background-color: var(--bg-secondary);
        }

        /* Sistema de Calificación con Estrellas */
        .rating-container {
            display: flex;
            align-items: center;
            gap: 16px;
            flex-wrap: wrap; /* Para pantallas pequeñas */
        }

        .star-rating {
            display: inline-flex;
        }

        .star {
            font-size: 24px;
            color: var(--star-default);
            cursor: pointer;
            transition: color 0.2s;
            padding: 0 2px;
        }

        .star:hover,
        .star.hover { /* Añadir clase hover para JS */
            color: var(--star-hover);
        }

        .star.active {
            color: var(--star-active);
        }

        .rating-text {
            color: var(--text-light);
            font-style: italic;
        }

        /* Estilos para la página de Declaración */
        .filter-controls {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            align-items: center;
            margin-bottom: 12px;
        }

        .records-list {
            max-height: 300px;
            overflow-y: auto;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            margin-top: 12px;
            background-color: var(--bg-color); /* Fondo para la lista */
        }

        .record-item {
            padding: 8px 12px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            align-items: center;
            gap: 8px;
            /* background-color: var(--bg-color); */ /* Movido al contenedor */
        }

        .record-item:last-child {
            border-bottom: none;
        }

        .record-item:hover {
            background-color: #f0f0f0;
        }

        .record-checkbox {
            margin-right: 8px;
        }

        .record-info {
            flex: 1;
            overflow: hidden; /* Para evitar desbordamiento */
        }

        .record-title {
            font-weight: 500;
            display: flex; /* Para alinear estrellas */
            align-items: center;
            gap: 4px; /* Espacio entre título y estrellas */
            flex-wrap: wrap; /* Para títulos largos */
        }

        .record-details {
            color: var(--text-light);
            font-size: 0.85rem;
            margin-top: 2px; /* Menos espacio */
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            margin-bottom: 8px; /* Espacio entre checkboxes */
        }

        .checkbox-group label {
            display: flex;
            align-items: center;
            gap: 6px;
            cursor: pointer;
            margin-bottom: 0; /* Anular margen inferior de label */
        }

        .checkbox-group input[type="checkbox"] {
            cursor: pointer;
            width: auto; /* Tamaño por defecto */
        }

        .declaration-options .form-group {
            margin-bottom: 10px; /* Menos espacio en opciones */
        }


        .declaration-preview-container {
            margin-top: 12px;
        }

        .declaration-preview {
            width: 100%;
            min-height: 200px;
            max-height: 400px; /* Limitar altura */
            padding: 12px;
            background-color: var(--bg-color);
            border: 1px solid var(--border-color);
            border-radius: 4px;
            white-space: pre-wrap;
            font-family: monospace;
            overflow: auto; /* Scroll si es necesario */
            margin-bottom: 12px;
            font-size: 0.9em; /* Ligeramente más pequeño */
        }

        .declaration-actions {
            display: flex;
            flex-wrap: wrap; /* Envolver botones */
            gap: 8px;
        }

        /* Campo de otra finalidad */
        #other-purpose-container {
            background-color: var(--bg-secondary);
            padding: 8px;
            border-radius: 4px;
            border: 1px solid var(--border-color);
            margin-top: 8px; /* Espacio superior */
        }

        /* Estilos para la página de Herramientas */
        .import-tabs {
            display: flex;
            flex-wrap: wrap;
            gap: 16px;
            margin-bottom: 16px;
        }

        .import-tab {
            flex: 1;
            min-width: 250px;
            border: 1px solid var(--border-color); /* Añadir borde */
            padding: 12px;
            border-radius: 4px;
        }

        .import-tab .form-actions {
            margin-top: 8px;
        }

        /* Tabla de proyectos para gestión */
        .projects-list-container {
            margin-top: 16px;
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid var(--border-color); /* Borde contenedor */
            border-radius: 4px;
        }

        .projects-table {
            width: 100%;
            border-collapse: collapse;
            border-spacing: 0;
        }

        .projects-table th, .projects-table td {
            padding: 10px 12px; /* Aumentar padding */
            text-align: left;
            border-bottom: 1px solid var(--border-color);
            vertical-align: middle; /* Alinear verticalmente */
        }

        .projects-table th {
            background-color: rgba(47, 0, 139, 0.1);
            font-weight: 600;
            color: var(--primary-color);
            position: sticky;
            top: 0;
            z-index: 1;
        }

        .projects-table tr:hover {
            background-color: rgba(255, 186, 40, 0.1);
        }

        .action-buttons {
            display: flex;
            gap: 8px;
            flex-wrap: nowrap; /* Evitar que se rompan los botones */
        }

        .edit-btn, .delete-btn {
            padding: 4px 8px;
            font-size: 0.85rem;
            white-space: nowrap; /* Texto en una línea */
        }

        .edit-btn {
            background-color: var(--edit-color);
        }

        .edit-btn:hover {
            background-color: #2980b9;
        }

        .delete-btn {
            background-color: var(--danger-color);
        }

        .delete-btn:hover {
            background-color: #c0392b;
        }

        /* Formulario de edición */
        .edit-form {
            margin-top: 16px;
            padding: 16px;
            border: 1px solid var(--primary-color);
            border-radius: 4px;
            background-color: var(--bg-color);
        }

        .danger-section {
            border: 1px solid var(--danger-color);
        }

        .danger-btn {
            background-color: var(--danger-color);
        }

        .danger-btn:hover {
            background-color: #c0392b;
        }

        .warning-text {
            color: var(--danger-color);
            font-weight: bold;
        }

        .csv-preview-container {
            margin-top: 16px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            padding: 16px;
            background-color: var(--bg-color);
        }

        .csv-preview {
            width: 100%;
            overflow-x: auto;
            max-height: 300px;
            overflow-y: auto;
        }

        .csv-preview table {
            width: 100%;
            border-collapse: collapse;
        }

        .csv-preview th, .csv-preview td {
            border: 1px solid var(--border-color);
            padding: 8px;
            text-align: left;
            white-space: nowrap; /* Evitar saltos de línea */
        }

        .csv-preview th {
            background-color: rgba(47, 0, 139, 0.1);
        }

        .csv-preview tr:nth-child(even) {
            background-color: rgba(0, 0, 0, 0.02);
        }

        /* Tabla de registros para gestión */
        .records-management-filters {
            display: flex;
            flex-wrap: wrap;
            gap: 16px;
            margin-bottom: 16px;
        }

        .filter-group {
            flex: 1;
            min-width: 200px;
        }

        .records-list-container {
            max-height: 600px;
            overflow-y: auto;
            margin-top: 16px;
        }

        .records-by-project {
            width: 100%;
        }

        .project-group {
            border: 1px solid var(--border-color);
            border-radius: 4px;
            margin-bottom: 16px;
            overflow: hidden; /* Para bordes redondeados */
        }

        .project-header {
            padding: 10px 12px;
            background-color: rgba(47, 0, 139, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            border-bottom: 1px solid var(--border-color); /* Separador */
        }
         .project-header:hover {
             background-color: rgba(47, 0, 139, 0.15);
         }

        .project-name {
            font-weight: 600;
            color: var(--primary-color);
        }

        .project-count {
            font-size: 0.9em;
            color: var(--text-light);
        }

        .project-records {
            display: none; /* Inicialmente oculto */
             background-color: white; /* Fondo para registros */
        }

        .project-records.expanded {
            display: block;
        }

        .record-row {
            display: flex;
            padding: 10px 12px;
            border-bottom: 1px solid var(--border-color);
            align-items: center;
        }

        .record-row:last-child {
            border-bottom: none;
        }

        .record-row:hover {
            background-color: rgba(255, 186, 40, 0.1);
        }

        .record-info { /* Movido arriba */
            flex: 1;
            min-width: 0; /* Para que flex funcione bien con overflow */
        }

        .record-name {
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 6px;
             word-break: break-word; /* Para nombres largos */
        }

        .record-details { /* Movido arriba */
            font-size: 0.85em;
            color: var(--text-light);
            margin-top: 4px;
            white-space: nowrap; /* Evitar saltos */
            overflow: hidden;
            text-overflow: ellipsis; /* Mostrar puntos suspensivos */
        }

        .record-rating {
            margin-left: auto; /* Empujar a la derecha dentro del nombre */
            color: var(--star-active);
            white-space: nowrap; /* Evitar que se rompan las estrellas */
        }

        .record-actions {
            display: flex;
            gap: 8px;
            margin-left: 16px; /* Espacio entre info y acciones */
        }

        /* Estilos para la página de Estadísticas */
        .stats-section {
            margin-bottom: 24px;
        }

        .stats-summary {
            display: grid; /* Usar grid para mejor alineación */
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); /* Columnas responsivas */
            gap: 16px;
            margin-top: 16px;
        }

        .stat-card {
            background-color: var(--bg-color);
            border-radius: 8px;
            padding: 16px;
            box-shadow: var(--shadow);
            text-align: center;
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        .stat-value {
            font-size: 2.2rem;
            font-weight: bold;
            color: var(--primary-color);
            margin-bottom: 8px;
            line-height: 1.1; /* Ajustar altura de línea */
        }

        .stat-label {
            color: var(--text-light);
            font-size: 0.85rem; /* Ligeramente más pequeño */
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .stats-filter-controls {
            display: flex;
            flex-wrap: wrap;
            gap: 16px;
            align-items: flex-end; /* Alinear botones abajo */
        }

        .stats-filter-controls .form-group {
            flex: 1;
            min-width: 180px; /* Reducir ancho mínimo */
            margin-bottom: 0; /* Quitar margen inferior */
        }

        .stats-filter-controls .form-actions {
            margin-top: 0;
            margin-left: auto; /* Empujar botones a la derecha si hay espacio */
        }

        /* Grid para tablas */
        .stats-tables-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); /* Ajustar ancho mínimo */
            gap: 24px; /* Más espacio */
            margin-bottom: 24px;
        }

        /* Tablas de estadísticas */
        .stats-table-container {
             background-color: var(--bg-secondary); /* Mover fondo aquí */
             border-radius: 8px;
             padding: 16px;
             box-shadow: var(--shadow);
        }

        .stats-table-wrapper {
            overflow-x: auto;
            max-height: 350px;
            overflow-y: auto;
            margin-top: 12px; /* Espacio después del título */
        }

        .stats-table {
            width: 100%;
            border-collapse: collapse;
            border-spacing: 0;
        }

        .stats-table th, .stats-table td {
            padding: 10px 12px;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
             vertical-align: middle; /* Alinear verticalmente */
        }

        .stats-table th {
            background-color: rgba(47, 0, 139, 0.1);
            font-weight: 600;
            color: var(--primary-color);
            position: sticky;
            top: 0;
            z-index: 1;
        }

        .stats-table tr:hover {
            background-color: rgba(255, 186, 40, 0.1);
        }
        .stats-table td:nth-child(1) { /* Primera columna (nombre) */
            word-break: break-word;
        }
        .stats-table td:nth-child(2), /* Columnas numéricas */
        .stats-table td:nth-child(3) {
            text-align: right;
            white-space: nowrap;
        }


        /* Barras de progreso en tablas */
        .progress-bar {
            height: 16px;
            background-color: #e0e0e0; /* Fondo más oscuro */
            border-radius: 8px;
            overflow: hidden;
            position: relative;
            width: 100%;
            min-width: 80px; /* Reducir mínimo */
        }

        .progress-fill {
            height: 100%;
            border-radius: 8px 0 0 8px; /* Redondear solo inicio */
            transition: width 0.5s ease-in-out;
            display: flex; /* Para centrar texto si se añade */
            align-items: center;
            justify-content: center;
            font-size: 10px; /* Texto pequeño dentro de la barra */
            color: white;
            font-weight: bold;
            text-shadow: 1px 1px 1px rgba(0,0,0,0.3); /* Sombra para legibilidad */
        }

        /* Nube de etiquetas */
        .tags-cloud {
            display: flex;
            flex-wrap: wrap;
            gap: 10px 15px; /* Más espacio */
            padding: 16px;
            justify-content: center;
            align-items: center; /* Alinear verticalmente */
            min-height: 100px;
             background-color: var(--bg-color); /* Fondo blanco */
             border-radius: 4px;
             border: 1px solid var(--border-color);
        }

        .tag-cloud-item {
            display: inline-block;
            padding: 5px 12px; /* Más padding */
            border-radius: 20px; /* Más redondeado */
            background-color: var(--primary-color);
            color: white;
            /* margin: 4px; */ /* Reemplazado por gap */
            font-size: 14px; /* Tamaño base */
            transition: transform 0.2s, background-color 0.2s;
            cursor: default; /* Indicar que no es clickable */
            line-height: 1.2; /* Ajustar altura */
        }

        .tag-cloud-item:hover {
            transform: scale(1.05);
            background-color: #3a00b0;
        }

        /* Mensaje de error o sin datos */
        .no-data-message {
            text-align: center;
            color: var(--text-light);
            font-style: italic;
            padding: 20px;
            width: 100%; /* Ocupar todo el ancho */
        }
        /* Específico para tablas */
        td.no-data-message {
             text-align: center !important; /* Forzar alineación */
        }


        /* Cronología */
        .timeline-container {
            width: 100%;
            padding: 20px 0;
            overflow-x: auto;
            max-height: 400px; /* Limitar altura */
            overflow-y: auto;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background-color: var(--bg-color);
        }

        .timeline-item {
            display: flex;
            margin-bottom: 8px; /* Menos espacio */
            align-items: center;
            padding: 0 10px; /* Padding horizontal */
        }

        .timeline-date {
            width: 100px; /* Ancho fijo para fecha */
            flex-shrink: 0;
            font-weight: 500;
            font-size: 0.9em; /* Más pequeño */
            color: var(--text-light);
            text-align: right; /* Alinear a la derecha */
            margin-right: 10px; /* Espacio antes de la barra */
        }

        .timeline-bar-container {
            flex-grow: 1;
            height: 20px; /* Más delgada */
            position: relative;
            background-color: #f0f0f0; /* Fondo para la barra completa */
            border-radius: 4px;
        }

        .timeline-bar {
            height: 100%;
            background-color: var(--primary-color);
            border-radius: 4px;
            position: relative;
            color: white;
            display: flex;
            align-items: center;
            justify-content: flex-end; /* Alinear número a la derecha */
            font-size: 11px; /* Más pequeño */
            font-weight: bold;
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
            min-width: 25px; /* Mínimo para ver el número */
            padding-right: 5px; /* Espacio para el número */
            transition: width 0.3s ease; /* Transición suave */
        }

        /* Estilos responsivos */
        @media (max-width: 900px) {
            .stats-tables-grid {
                grid-template-columns: 1fr; /* Una columna en pantallas medianas */
            }
            .project-controls, .project-actions {
                 flex-direction: column; /* Apilar controles */
                 align-items: stretch; /* Ocupar ancho */
            }
            #project-select {
                 width: 100%; /* Ancho completo */
            }
             .record-row {
                 flex-direction: column; /* Apilar info y acciones */
                 align-items: flex-start;
             }
             .record-actions {
                 margin-left: 0;
                 margin-top: 8px; /* Espacio superior */
             }
        }

        @media (max-width: 600px) {
            .container {
                padding: 8px; /* Menos padding */
            }
            header {
                flex-direction: column;
                align-items: flex-start;
                gap: 8px;
            }
            .tab-navigation {
                gap: 2px; /* Menos espacio entre pestañas */
            }
            .tab-button {
                padding: 6px 8px; /* Botones más pequeños */
                font-size: 0.9em;
            }
             h1 { font-size: 1.3rem; }
             h2 { font-size: 1.15rem; }
             h3 { font-size: 1.05rem; }

             .form-actions {
                 flex-direction: column; /* Botones apilados */
                 align-items: stretch;
             }
              .form-actions button {
                  width: 100%; /* Botones ancho completo */
              }


            .stats-summary {
                 grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); /* Más pequeños */
                 gap: 8px;
            }
            .stat-card {
                 padding: 12px;
            }
            .stat-value {
                 font-size: 1.8rem;
            }
            .stat-label {
                 font-size: 0.75rem;
            }

            .stats-filter-controls {
                flex-direction: column;
                align-items: stretch; /* Ocupar ancho */
            }
            .stats-filter-controls .form-group {
                width: 100%;
                 min-width: unset; /* Resetear ancho mínimo */
            }
             .stats-filter-controls .form-actions {
                 margin-left: 0; /* Resetear margen */
                 margin-top: 8px; /* Espacio arriba */
             }

            .timeline-item {
                /* flex-direction: column; */ /* Mantener flexión? */
                /* align-items: flex-start; */
                 padding: 0 5px;
            }
            .timeline-date {
                 width: 70px; /* Más estrecho */
                 font-size: 0.8em;
                 text-align: left;
                 margin-right: 5px;
            }
             .timeline-bar {
                 font-size: 10px;
                 padding-right: 3px;
             }

             .projects-table th, .projects-table td,
             .stats-table th, .stats-table td {
                  padding: 8px 6px; /* Menos padding */
             }
             .projects-table, .stats-table {
                  font-size: 0.9em; /* Reducir fuente en tablas */
             }
             .action-buttons {
                  gap: 4px;
             }
             .edit-btn, .delete-btn {
                  padding: 3px 5px;
                  font-size: 0.8rem;
             }

             /* Input tamaño fuente 16px para evitar zoom iOS */
             input[type="text"], input[type="url"], textarea, select {
                font-size: 16px !important;
            }

        }
    </style>
</head>
<body>
    <!-- --- Contenido de index.html --- -->
    <div class="container">
        <header>
            <h1>ChatLog (Demo)</h1> <!-- Añadido (Demo) -->
            <div class="header-controls">
                <span id="storage-usage" class="storage-info">Uso: 0KB/5MB</span>
            </div>
        </header>

        <!-- Navegación por Pestañas -->
        <nav class="tab-navigation">
            <button class="tab-button active" data-tab="main">Proyectos</button>
            <button class="tab-button" data-tab="declaration">Declaración de Uso</button>
            <button class="tab-button" data-tab="tools">Herramientas</button>
            <button class="tab-button" data-tab="stats">Estadísticas</button>
        </nav>

        <!-- Página Proyectos (antiguamente Principal) -->
        <section id="main" class="tab-content active">
            <!-- Gestión de Proyectos -->
            <div class="section">
                <h2>Gestión de Proyectos</h2>
                <div class="project-controls">
                    <select id="project-select">
                        <option value="all">-- Mostrar Todos --</option>
                        <option value="none">-- Sin Proyecto --</option>
                    </select>
                    <div class="project-actions">
                        <input type="text" id="new-project-name" placeholder="Nombre del nuevo proyecto">
                        <button id="add-project-btn">Crear Proyecto</button>
                        <button id="delete-project-btn" disabled>Eliminar Proyecto</button>
                    </div>
                </div>
            </div>

            <!-- Formulario de Registros -->
            <div class="section">
                <h2 id="form-title">Nuevo Registro</h2>
                <form id="record-form">
                    <input type="hidden" id="record-id">

                    <div class="form-group">
                        <label for="interaction-name">Nombre de la Interacción: *</label>
                        <input type="text" id="interaction-name" required placeholder="Título descriptivo de la interacción">
                    </div>

                    <div class="form-group">
                        <label for="purpose">Finalidad de la Interacción: *</label>
                        <select id="purpose" required>
                            <option value="">-- Selecciona una finalidad --</option>
                            <option value="Análisis de documentos">Análisis de documentos</option>
                            <option value="Asistencia en programación">Asistencia en programación</option>
                            <option value="Creación de presentaciones">Creación de presentaciones</option>
                            <option value="Generación de texto">Generación de texto</option>
                            <option value="Ideación y brainstorming">Ideación y brainstorming</option>
                            <option value="Investigación bibliográfica">Investigación bibliográfica</option>
                            <option value="Planificación de proyectos">Planificación de proyectos</option>
                            <option value="Resumen de información">Resumen de información</option>
                            <option value="Revisión de escritura">Revisión de escritura</option>
                            <option value="Traducción de contenido">Traducción de contenido</option>
                            <option value="Otro">Otro</option>
                        </select>
                        <div id="other-purpose-container" style="display:none; margin-top:8px;">
                            <input type="text" id="other-purpose" placeholder="Especificar otra finalidad">
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="llm-name">Nombre del LLM: *</label>
                        <input type="text" id="llm-name" required placeholder="Ej: ChatGPT, Claude, Gemini, etc.">
                    </div>

                    <div class="form-group">
                        <label for="llm-version">Versión del LLM:</label>
                        <input type="text" id="llm-version" placeholder="Ej: GPT-4, Claude 3 Opus, etc.">
                    </div>

                    <div class="form-group">
                        <label for="prompt">Prompt: *</label>
                        <textarea id="prompt" required rows="4" placeholder="Prompt principal utilizado en la interacción"></textarea>
                    </div>

                    <div class="form-group">
                        <label for="interaction-link">Liga a la Interacción:</label>
                        <input type="url" id="interaction-link" placeholder="URL de la conversación (si está disponible)">
                    </div>

                    <div class="form-group">
                        <label for="tags-input">Etiquetas / Palabras Clave:</label>
                        <div class="tags-container">
                            <div id="tags-list"></div>
                            <input type="text" id="tags-input" placeholder="Escribe y presiona Enter o coma">
                            <div id="tags-suggestions" class="tags-suggestions"></div>
                        </div>
                        <input type="hidden" id="tags">
                    </div>

                    <div class="form-group">
                        <label for="ethical-notes">Notas sobre Aspectos Éticos:</label>
                        <textarea id="ethical-notes" rows="3" placeholder="Consideraciones éticas relevantes para esta interacción"></textarea>
                    </div>

                    <div class="form-group">
                        <label for="bias-notes">Notas sobre Mitigación de Riesgos/Sesgos:</label>
                        <textarea id="bias-notes" rows="3" placeholder="Estrategias utilizadas para mitigar riesgos o sesgos"></textarea>
                    </div>

                    <div class="form-group">
                        <label for="observations">Otras Observaciones:</label>
                        <textarea id="observations" rows="3" placeholder="Observaciones adicionales sobre la interacción"></textarea>
                    </div>

                    <div class="form-group">
                        <label>Calificación de la Interacción:</label>
                        <div class="rating-container">
                            <div class="star-rating">
                                <span class="star" data-rating="1">★</span>
                                <span class="star" data-rating="2">★</span>
                                <span class="star" data-rating="3">★</span>
                                <span class="star" data-rating="4">★</span>
                                <span class="star" data-rating="5">★</span>
                            </div>
                            <div class="rating-text">Sin calificar</div>
                            <input type="hidden" id="rating-value" value="0">
                        </div>
                    </div>

                    <div class="form-actions">
                        <button type="submit" id="save-record-btn">Guardar Registro</button>
                        <button type="button" id="cancel-edit-btn" style="display:none;">Cancelar Edición</button>
                    </div>
                </form>
            </div>

            <!-- Lista de Acceso Rápido -->
            <div class="section">
                <h2>Acceso Rápido (Últimos 10)</h2>
                <div id="quick-access-list">
                    <p id="no-records-message" class="no-data-message">No hay registros guardados.</p>
                    <ul id="recent-records"></ul>
                </div>
            </div>
        </section>

        <!-- Página Declaración de Uso -->
        <section id="declaration" class="tab-content">
            <h2>Declaración de Uso de LLMs</h2>

            <div class="section">
                <h3>Selección de Registros</h3>
                <div class="filter-controls">
                    <label for="declaration-project-select">Filtrar por Proyecto:</label>
                    <select id="declaration-project-select">
                        <option value="all">Todos los Proyectos</option>
                        <option value="none">Sin Proyecto</option>
                    </select>
                    <button id="select-all-records-btn">Seleccionar Todos</button>
                    <button id="deselect-all-records-btn">Deseleccionar Todos</button>
                </div>

                <div id="records-container">
                    <p id="no-declaration-records-message" class="no-data-message">No hay registros disponibles para la declaración.</p>
                    <div id="records-list" class="records-list"></div>
                </div>
            </div>

            <div class="section">
                <h3>Opciones de Declaración</h3>
                <div class="declaration-options">
                    <div class="form-group">
                        <label for="declaration-format">Formato:</label>
                        <select id="declaration-format">
                            <option value="standard">Estándar</option>
                            <option value="detailed">Detallado</option>
                            <option value="minimal">Mínimo</option>
                            <option value="apa">Estilo APA</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="researcher-name">Nombre del Investigador/a (opcional):</label>
                        <input type="text" id="researcher-name" placeholder="Tu nombre">
                    </div>

                    <div class="form-group">
                        <label for="institution-name">Institución (opcional):</label>
                        <input type="text" id="institution-name" placeholder="Nombre de tu institución">
                    </div>

                    <div class="form-group checkbox-group">
                        <label>
                            <input type="checkbox" id="include-prompts" checked>
                            Incluir prompts completos
                        </label>
                    </div>

                    <div class="form-group checkbox-group">
                        <label>
                            <input type="checkbox" id="include-links" checked>
                            Incluir enlaces a conversaciones
                        </label>
                    </div>

                    <div class="form-group checkbox-group">
                        <label>
                            <input type="checkbox" id="include-dates" checked>
                            Incluir fechas
                        </label>
                    </div>

                    <div class="form-actions">
                        <button id="generate-declaration-btn">Generar Declaración</button>
                    </div>
                </div>
            </div>

            <div class="section">
                <h3>Vista Previa de la Declaración</h3>
                <div class="declaration-preview-container">
                    <pre id="declaration-preview" class="declaration-preview">La declaración se mostrará aquí después de generarla.</pre>

                    <div class="declaration-actions">
                        <button id="copy-declaration-btn">Copiar al Portapapeles</button>
                        <button id="download-declaration-btn">Descargar como TXT</button>
                    </div>
                </div>
            </div>
        </section>

        <!-- Página Herramientas -->
        <section id="tools" class="tab-content">
            <h2>Herramientas</h2>

            <!-- Exportar Datos -->
            <div class="section">
                <h3>Exportar Datos</h3>
                <p>Guarda todos tus datos para hacer una copia de seguridad o transferirlos a otro dispositivo.</p>
                <div class="form-actions">
                    <button id="export-all-btn">Exportar Todos los Datos (JSON)</button>
                    <button id="export-csv-btn">Exportar Registros como CSV</button>
                </div>
            </div>

            <!-- Importar Datos (Unificado) -->
            <div class="section">
                <h3>Importar Datos</h3>
                <p>Restaura tus datos desde archivos de respaldo generados anteriormente.</p>

                <div class="import-tabs">
                    <div class="import-tab">
                        <div class="form-group">
                            <label for="import-file">Importar desde JSON:</label>
                            <input type="file" id="import-file" accept=".json">
                            <div class="form-actions">
                                <button id="import-data-btn">Importar JSON</button>
                            </div>
                        </div>
                    </div>

                    <div class="import-tab">
                        <div class="form-group">
                            <label for="csv-file">Importar desde CSV:</label>
                            <input type="file" id="csv-file" accept=".csv">
                            <div class="form-actions">
                                <button id="import-csv-btn">Importar CSV</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="csv-preview-container" id="csv-preview-container" style="display: none;">
                    <h4>Vista previa CSV</h4>
                    <div class="csv-preview" id="csv-preview"></div>
                </div>
            </div>

            <!-- Edición y Borrado de Proyectos -->
            <div class="section">
                <h3>Edición y Borrado de Proyectos</h3>
                <p>Gestiona tus proyectos: cambia nombres o elimina proyectos completos.</p>

                <div class="projects-management">
                    <div class="projects-list-container">
                        <table class="projects-table" id="projects-management-table">
                            <thead>
                                <tr>
                                    <th>Nombre del Proyecto</th>
                                    <th>Fecha de Creación</th>
                                    <th>Registros</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Se llenará dinámicamente -->
                                <tr>
                                    <td colspan="4" class="no-data-message">No hay proyectos disponibles</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Formulario de edición de proyecto (oculto por defecto) -->
                <div id="edit-project-form" class="edit-form" style="display: none;">
                    <h4>Editar Proyecto</h4>
                    <div class="form-group">
                        <input type="hidden" id="edit-project-id">
                        <label for="edit-project-name">Nombre del Proyecto:</label>
                        <input type="text" id="edit-project-name" required>
                    </div>
                    <div class="form-actions">
                        <button id="save-project-edit-btn">Guardar Cambios</button>
                        <button id="cancel-project-edit-btn" type="button" style="background-color: var(--text-light);">Cancelar</button>
                    </div>
                </div>
            </div>

            <!-- Edición y Borrado de Registros -->
            <div class="section">
                <h3>Edición y Borrado de Registros</h3>
                <p>Gestiona tus registros: edita detalles o elimina entradas individuales.</p>

                <div class="records-management-filters">
                    <div class="filter-group">
                        <label for="records-project-filter">Filtrar por Proyecto:</label>
                        <select id="records-project-filter">
                            <option value="all">Todos los Proyectos</option>
                            <!-- Se llenará dinámicamente -->
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="records-sort-by">Ordenar por:</label>
                        <select id="records-sort-by">
                            <option value="date-desc">Fecha (más reciente primero)</option>
                            <option value="date-asc">Fecha (más antigua primero)</option>
                            <option value="rating-desc">Calificación (mayor primero)</option>
                            <option value="rating-asc">Calificación (menor primero)</option>
                            <option value="name">Nombre</option>
                        </select>
                    </div>
                </div>

                <div class="records-list-container">
                    <div id="records-by-project" class="records-by-project">
                        <!-- Se llenará dinámicamente -->
                        <div class="no-data-message">No hay registros disponibles</div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Página Estadísticas -->
        <section id="stats" class="tab-content">
            <h2>Estadísticas de Uso de LLMs</h2>

            <!-- Resumen General -->
            <div class="section stats-section">
                <h3>Resumen General</h3>
                <div class="stats-summary">
                    <div class="stat-card">
                        <div class="stat-value" id="total-interactions">0</div>
                        <div class="stat-label">Interacciones</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="total-models">0</div>
                        <div class="stat-label">Modelos</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="total-projects">0</div>
                        <div class="stat-label">Proyectos</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="total-purposes">0</div>
                        <div class="stat-label">Finalidades</div>
                    </div>
                </div>
            </div>

            <!-- Opciones de Filtrado -->
            <div class="section">
                <h3>Filtros</h3>
                <div class="stats-filter-controls">
                    <div class="form-group">
                        <label for="stats-date-range">Período:</label>
                        <select id="stats-date-range">
                            <option value="all">Todo el tiempo</option>
                            <option value="month">Último mes</option>
                            <option value="quarter">Último trimestre</option>
                            <option value="year">Último año</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="stats-project-filter">Proyecto:</label>
                        <select id="stats-project-filter">
                            <option value="all">Todos los proyectos</option>
                             <!-- Se llenará dinámicamente -->
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="stats-model-filter">Modelo LLM:</label>
                        <select id="stats-model-filter">
                            <option value="all">Todos los modelos</option>
                             <!-- Se llenará dinámicamente -->
                        </select>
                    </div>
                    <div class="form-actions">
                        <button id="apply-stats-filters-btn">Aplicar Filtros</button>
                        <button id="reset-stats-filters-btn" type="button" style="background-color: var(--text-light);">Restablecer</button>
                    </div>
                </div>
            </div>

            <!-- Tablas de datos con visualización -->
             <div class="stats-tables-grid">
                <div class="stats-table-container"> <!-- Contenedor para tabla y título -->
                    <h3>Modelos Más Utilizados</h3>
                    <div class="stats-table-wrapper">
                        <table class="stats-table" id="models-table">
                            <thead>
                                <tr>
                                    <th>Modelo</th>
                                    <th>Interacciones</th>
                                    <th>%</th>
                                    <th>Distribución</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Se llenará dinámicamente -->
                                <tr><td colspan="4" class="no-data-message">Calculando...</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="stats-table-container">
                    <h3>Finalidades Más Comunes</h3>
                    <div class="stats-table-wrapper">
                        <table class="stats-table" id="purposes-table">
                             <thead>
                                <tr>
                                    <th>Finalidad</th>
                                    <th>Interacciones</th>
                                    <th>%</th>
                                    <th>Distribución</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Se llenará dinámicamente -->
                                 <tr><td colspan="4" class="no-data-message">Calculando...</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>


            <!-- Distribución por Proyecto -->
             <div class="section stats-section"> <!-- Lo moví a su propia sección -->
                <h3>Distribución por Proyecto</h3>
                 <div class="stats-table-container"> <!-- Usar el mismo contenedor -->
                     <div class="stats-table-wrapper">
                        <table class="stats-table" id="projects-table-stats"> <!-- ID diferente para evitar conflicto -->
                            <thead>
                                <tr>
                                    <th>Proyecto</th>
                                    <th>Interacciones</th>
                                    <th>%</th>
                                    <th>Distribución</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Se llenará dinámicamente -->
                                 <tr><td colspan="4" class="no-data-message">Calculando...</td></tr>
                            </tbody>
                        </table>
                    </div>
                 </div>
            </div>

             <!-- Cronología -->
            <div class="section stats-section">
                <h3>Actividad en el Tiempo</h3>
                <div id="timeline-container" class="timeline-container">
                    <!-- Se llenará dinámicamente -->
                     <div class="no-data-message">Calculando...</div>
                </div>
            </div>


            <!-- Etiquetas Más Utilizadas -->
            <div class="section stats-section">
                <h3>Etiquetas Más Utilizadas</h3>
                <div id="tags-cloud" class="tags-cloud">
                    <!-- Se llenará dinámicamente -->
                    <div class="no-data-message">Calculando...</div>
                </div>
            </div>
        </section>
    </div>

    <script>
        // --- Contenido de script.js ---
        // Variables globales para el sistema de etiquetas
        let allTags = [];
        let currentTags = [];
        // Variables para la declaración
        let selectedRecords = [];

        // Inicialización cuando el DOM está listo
        document.addEventListener('DOMContentLoaded', function() {
            console.log('ChatLog DEMO inicializando...'); // Modificado para demo

            // Inicializar navegación por pestañas
            initTabNavigation();

            // Cargar datos iniciales
            loadProjects();
            loadQuickAccessList();
            updateStorageUsage();

            // Configurar event listeners para la interfaz
            setupEventListeners();

            // Inicializar sistema de etiquetas
            initTagsSystem();

            // Inicializar sistema de finalidad "Otro"
            initOtherPurposeField();

            // Inicializar sistema de calificación por estrellas
            initRatingSystem();

             // Cargar datos iniciales para pestañas no activas (opcional pero mejora UX)
             preloadTabData();
        });

        // --- FUNCIONES PRINCIPALES ---

        // Navegación por pestañas
        function initTabNavigation() {
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');

            tabButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const tabName = this.getAttribute('data-tab');

                    // Desactivar todos los botones y contenido
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabContents.forEach(content => content.classList.remove('active'));

                    // Activar el botón y contenido seleccionado
                    this.classList.add('active');
                    const activeContent = document.getElementById(tabName);
                    if (activeContent) {
                         activeContent.classList.add('active');
                    } else {
                         console.error("Contenido de pestaña no encontrado:", tabName);
                         return; // Salir si no se encuentra el contenido
                    }


                    // Cargar datos específicos de cada pestaña si es necesario
                     // (Se llama a preloadTabData al inicio, pero se puede recargar aquí si es necesario)
                    switch(tabName) {
                        case 'declaration':
                            // loadDeclarationProjects(); // Ya se hace en preload
                            loadRecordsForDeclaration(); // Recargar registros al mostrar
                            break;
                        case 'stats':
                            loadStatistics(); // Recargar estadísticas al mostrar
                            break;
                        case 'tools':
                             // loadProjectsForManagement(); // Ya se hace en preload
                             loadRecordsForManagement(); // Recargar registros al mostrar
                            break;
                         case 'main':
                             // Podríamos recargar la lista de acceso rápido aquí si cambiara mucho
                             loadQuickAccessList(document.getElementById('project-select').value);
                             break;
                    }
                });
            });
        }

        // Precarga datos para pestañas no activas
        function preloadTabData() {
            console.log('Precargando datos de pestañas...');
            loadDeclarationProjects();
            loadProjectsForManagement();
            initRecordsManagementFilters(); // Solo inicializa filtros, no carga datos aún
             populateStatisticsFilters(); // Solo inicializa filtros, no carga datos aún
        }


        // Configurar todos los event listeners de la aplicación
        function setupEventListeners() {
             console.log('Configurando event listeners...');
            // Event listeners para la gestión de proyectos (Pestaña Principal)
            document.getElementById('add-project-btn')?.addEventListener('click', addProject);
            document.getElementById('delete-project-btn')?.addEventListener('click', deleteProject);
            document.getElementById('project-select')?.addEventListener('change', handleProjectSelection);

            // Event listeners para el formulario de registros (Pestaña Principal)
            document.getElementById('record-form')?.addEventListener('submit', function(e) {
                e.preventDefault();
                saveRecord();
            });
            document.getElementById('cancel-edit-btn')?.addEventListener('click', cancelEditRecord);

            // Event listeners para declaración (Pestaña Declaración)
            document.getElementById('declaration-project-select')?.addEventListener('change', filterRecordsForDeclaration);
            document.getElementById('select-all-records-btn')?.addEventListener('click', selectAllRecords);
            document.getElementById('deselect-all-records-btn')?.addEventListener('click', deselectAllRecords);
            document.getElementById('generate-declaration-btn')?.addEventListener('click', generateDeclaration);
            document.getElementById('copy-declaration-btn')?.addEventListener('click', copyDeclarationToClipboard);
            document.getElementById('download-declaration-btn')?.addEventListener('click', downloadDeclaration);

            // Event listeners para estadísticas (Pestaña Estadísticas)
            document.getElementById('apply-stats-filters-btn')?.addEventListener('click', applyStatisticsFilters);
            document.getElementById('reset-stats-filters-btn')?.addEventListener('click', resetStatisticsFilters);

            // Event listeners para herramientas (Pestaña Herramientas)
            document.getElementById('export-all-btn')?.addEventListener('click', exportAllData);
            document.getElementById('export-csv-btn')?.addEventListener('click', exportCSV);
            document.getElementById('import-data-btn')?.addEventListener('click', importData);
             document.getElementById('import-file')?.addEventListener('change', () => {
                 // Habilitar botón de importar JSON si se selecciona un archivo
                 document.getElementById('import-data-btn').disabled = !document.getElementById('import-file').files.length;
             });
            document.getElementById('import-csv-btn')?.addEventListener('click', importCSV);
            document.getElementById('csv-file')?.addEventListener('change', () => {
                 previewCSV();
                 // Habilitar botón de importar CSV si se selecciona un archivo
                 document.getElementById('import-csv-btn').disabled = !document.getElementById('csv-file').files.length;
            });

             // Deshabilitar botones de importación inicialmente
             document.getElementById('import-data-btn').disabled = true;
             document.getElementById('import-csv-btn').disabled = true;


            // Event listeners para gestión de proyectos (Pestaña Herramientas)
            document.getElementById('save-project-edit-btn')?.addEventListener('click', saveProjectEdit);
            document.getElementById('cancel-project-edit-btn')?.addEventListener('click', cancelProjectEdit);

            // Event listeners para gestión de registros (Pestaña Herramientas)
            document.getElementById('records-project-filter')?.addEventListener('change', loadRecordsForManagement);
            document.getElementById('records-sort-by')?.addEventListener('change', loadRecordsForManagement);

             console.log('Event listeners configurados.');
        }

        // --- GESTIÓN DE ALMACENAMIENTO ---

        // Guarda datos en el almacenamiento local
        function saveToStorage(key, data) {
            try {
                const jsonData = JSON.stringify(data);
                // Añadir verificación de tamaño antes de guardar (aproximado)
                const currentUsage = calculateStorageUsage();
                const newDataSize = jsonData.length * 2; // UTF-16 approx
                const oldDataSize = (localStorage.getItem(key) || '').length * 2;
                const limit = 5 * 1024 * 1024; // 5MB

                if (currentUsage - oldDataSize + newDataSize > limit) {
                     alert('Error: No se pudo guardar. Se excedería el límite de almacenamiento local (5MB).');
                     console.error('Error al guardar: Límite de almacenamiento excedido.');
                     return false;
                }

                localStorage.setItem(key, jsonData);
                updateStorageUsage(); // Actualizar UI después de guardar
                return true;
            } catch (error) {
                console.error('Error al guardar en el almacenamiento local:', error);
                 // Detectar error de cuota
                 if (error.name === 'QuotaExceededError' || error.code === 22 || error.code === 1014) {
                     alert('Error al guardar: Almacenamiento local lleno (límite de 5MB).');
                 } else {
                     alert('Error al guardar los datos. Es posible que el almacenamiento esté lleno o inaccesible.');
                 }
                return false;
            }
        }

        // Carga datos del almacenamiento local
        function loadFromStorage(key) {
            try {
                const data = localStorage.getItem(key);
                return data ? JSON.parse(data) : null;
            } catch (error) {
                console.error(`Error al cargar ${key} del almacenamiento local:`, error);
                 // Si hay un error de parseo, podría indicar datos corruptos.
                 // Podríamos intentar limpiar la clave si falla repetidamente.
                 // localStorage.removeItem(key); // ¡Cuidado con esto!
                return null;
            }
        }

         // Calcula el uso actual del almacenamiento local
         function calculateStorageUsage() {
             let totalSize = 0;
             for (let i = 0; i < localStorage.length; i++) {
                 const key = localStorage.key(i);
                 const value = localStorage.getItem(key);
                 // Solo calcular claves que pertenecen a esta app (opcional pero bueno)
                 if (key.startsWith('chatlog_')) {
                     totalSize += (key.length + value.length) * 2; // UTF-16
                 }
             }
             return totalSize;
         }


        // Actualiza la información de uso del almacenamiento en la UI
        function updateStorageUsage() {
            const usageElement = document.getElementById('storage-usage');
            if (!usageElement) return; // Salir si el elemento no existe

            const totalSize = calculateStorageUsage();

            // Convertir a KB o MB según sea apropiado
            let sizeText = '';
            if (totalSize < 1024 * 1024) { // Menos de 1MB
                sizeText = `${(totalSize / 1024).toFixed(1)}KB`;
            } else {
                sizeText = `${(totalSize / (1024 * 1024)).toFixed(1)}MB`;
            }

            usageElement.textContent = `Uso: ${sizeText}/5MB`;

             // Cambiar color si se acerca al límite (ej. > 4.5MB)
             if (totalSize > 4.5 * 1024 * 1024) {
                 usageElement.style.color = 'var(--danger-color)';
                 usageElement.style.fontWeight = 'bold';
             } else {
                  usageElement.style.color = 'var(--text-light)';
                  usageElement.style.fontWeight = 'normal';
             }
        }

        // --- GESTIÓN DE PROYECTOS ---

        // Carga la lista de proyectos en TODOS los selectores relevantes
        function loadProjects() {
            const projects = loadFromStorage('chatlog_projects') || [];
            console.log(`Cargando ${projects.length} proyectos...`);

            // Ordenar proyectos alfabéticamente
            projects.sort((a, b) => a.name.localeCompare(b.name));

            const selectors = [
                document.getElementById('project-select'),
                document.getElementById('declaration-project-select'),
                document.getElementById('records-project-filter'),
                document.getElementById('stats-project-filter')
            ];

            selectors.forEach(select => {
                 if (!select) return; // Si algún selector no existe, continuar

                 // Guardar el valor seleccionado actualmente (si existe)
                 const currentSelectedValue = select.value;

                // Limpiar opciones existentes (mantener las opciones por defecto si existen)
                 let defaultOptions = [];
                 if (select.id === 'project-select' || select.id === 'declaration-project-select') {
                     // Mantener "Todos" y "Sin proyecto"
                     defaultOptions = Array.from(select.options).slice(0, 2);
                 } else if (select.id === 'records-project-filter' || select.id === 'stats-project-filter') {
                     // Mantener "Todos", añadir "Sin proyecto" si no existe
                     defaultOptions.push(select.options[0]); // "Todos"
                     if (!Array.from(select.options).some(opt => opt.value === 'none')) {
                         const noneOption = document.createElement('option');
                         noneOption.value = 'none';
                         noneOption.textContent = 'Sin proyecto';
                         defaultOptions.push(noneOption);
                     } else {
                         defaultOptions.push(Array.from(select.options).find(opt => opt.value === 'none'));
                     }
                 }


                select.innerHTML = ''; // Limpiar completamente
                defaultOptions.forEach(option => select.appendChild(option.cloneNode(true))); // Añadir defaults clonados

                // Agregar proyectos del almacenamiento
                projects.forEach(project => {
                    const option = document.createElement('option');
                    option.value = project.id;
                    option.textContent = project.name;
                    select.appendChild(option);
                });

                 // Intentar restaurar el valor seleccionado
                 if (Array.from(select.options).some(opt => opt.value === currentSelectedValue)) {
                     select.value = currentSelectedValue;
                 } else if (select.id === 'project-select') {
                     select.value = 'all'; // Volver a "Todos" si el proyecto ya no existe
                 }


                 // Caso especial: Actualizar estado del botón borrar en el selector principal
                 if (select.id === 'project-select') {
                     handleProjectSelectionState(select.value);
                 }

            });
            console.log('Selectores de proyecto actualizados.');
        }


        // Agrega un nuevo proyecto
        function addProject() {
            const projectNameInput = document.getElementById('new-project-name');
            const projectName = projectNameInput.value.trim();

            if (!projectName) {
                alert('Por favor, ingresa un nombre para el proyecto.');
                 projectNameInput.focus();
                return;
            }

            const projects = loadFromStorage('chatlog_projects') || [];

            // Verificar si ya existe un proyecto con el mismo nombre (insensible a mayúsculas/minúsculas)
            if (projects.some(p => p.name.toLowerCase() === projectName.toLowerCase())) {
                alert('Ya existe un proyecto con ese nombre.');
                 projectNameInput.focus();
                return;
            }

            // Crear nuevo proyecto
            const newProject = {
                id: Date.now().toString() + Math.random().toString(36).substring(2, 8), // ID más único
                name: projectName,
                dateCreated: new Date().toISOString()
            };

            projects.push(newProject);

            // Guardar y actualizar interfaz
            if (saveToStorage('chatlog_projects', projects)) {
                 console.log(`Proyecto "${projectName}" creado con ID ${newProject.id}`);
                projectNameInput.value = ''; // Limpiar input
                loadProjects(); // Recargar todos los selectores

                // Actualizar tabla de gestión de proyectos si la pestaña Herramientas está activa
                 if (document.getElementById('tools')?.classList.contains('active')) {
                    loadProjectsForManagement();
                 }

                 // Seleccionar el nuevo proyecto en el selector principal
                 const projectSelect = document.getElementById('project-select');
                 if (projectSelect) {
                     projectSelect.value = newProject.id;
                     handleProjectSelection(); // Asegurarse de que la UI reaccione a la nueva selección
                 }
                 alert(`Proyecto "${projectName}" creado correctamente.`);
            }
        }

        // Elimina un proyecto seleccionado (desde el selector principal)
        function deleteProject() {
            const projectSelect = document.getElementById('project-select');
            const selectedProjectId = projectSelect.value;
            const selectedProjectName = projectSelect.options[projectSelect.selectedIndex]?.text;


            if (!selectedProjectId || selectedProjectId === 'all' || selectedProjectId === 'none') {
                alert('Por favor, selecciona un proyecto válido para eliminar.');
                return;
            }

            // Contar registros asociados
             const records = loadFromStorage('chatlog_records') || [];
             const associatedRecordsCount = records.filter(r => r.projectId === selectedProjectId).length;
             let confirmationMessage = `¿Estás seguro de que deseas eliminar el proyecto "${selectedProjectName}"?`;
             if (associatedRecordsCount > 0) {
                 confirmationMessage += `\n\nEste proyecto tiene ${associatedRecordsCount} registro(s) asociado(s). Estos registros NO serán eliminados, pero perderán la asociación con este proyecto (quedarán como "Sin Proyecto").`;
             }


            if (!confirm(confirmationMessage)) {
                return;
            }

            deleteProjectById(selectedProjectId, selectedProjectName);
        }

        // Elimina un proyecto por su ID (función interna reutilizable)
        function deleteProjectById(projectId, projectName = 'este proyecto') {
            if (!projectId) return;

             console.log(`Intentando eliminar proyecto ID: ${projectId}`);
            const projects = loadFromStorage('chatlog_projects') || [];
            const filteredProjects = projects.filter(project => project.id !== projectId);

            // Guardar proyectos actualizados
            if (saveToStorage('chatlog_projects', filteredProjects)) {
                 console.log(`Proyecto ID ${projectId} eliminado del almacenamiento.`);
                // Actualizar registros que tenían este proyecto asignado
                const records = loadFromStorage('chatlog_records') || [];
                let recordsUpdatedCount = 0;
                const updatedRecords = records.map(record => {
                    if (record.projectId === projectId) {
                         recordsUpdatedCount++;
                        return { ...record, projectId: null }; // Asignar a null (Sin proyecto)
                    }
                    return record;
                });

                 // Guardar registros solo si hubo cambios
                 if (recordsUpdatedCount > 0) {
                     if (!saveToStorage('chatlog_records', updatedRecords)) {
                          // Si falla el guardado de registros, idealmente deberíamos revertir la eliminación del proyecto (rollback)
                          // Por simplicidad, aquí solo mostramos un error adicional.
                          alert('Error al actualizar los registros asociados al proyecto eliminado. Los registros pueden seguir mostrando el proyecto antiguo hasta la próxima edición.');
                     } else {
                          console.log(`${recordsUpdatedCount} registros actualizados a "Sin Proyecto".`);
                     }
                 }


                // Actualizar interfaz
                 loadProjects(); // Recarga todos los selectores

                 // Resetear selección en selector principal si era el eliminado
                 const projectSelect = document.getElementById('project-select');
                 if (projectSelect && projectSelect.value === projectId) { // Si justo era el seleccionado
                     projectSelect.value = 'all'; // Volver a "Todos"
                 }
                 handleProjectSelection(); // Actualizar lista rápida y estado del botón

                // Actualizar tabla de gestión de proyectos si la pestaña Herramientas está activa
                 if (document.getElementById('tools')?.classList.contains('active')) {
                    loadProjectsForManagement();
                     loadRecordsForManagement(); // Recargar también registros en herramientas
                 }

                 alert(`Proyecto "${projectName}" eliminado correctamente.`);
            } else {
                 alert(`Error al eliminar el proyecto "${projectName}".`);
            }
        }

         // Actualiza el estado del botón de borrar proyecto basado en la selección
         function handleProjectSelectionState(selectedValue) {
             const deleteProjectBtn = document.getElementById('delete-project-btn');
             if (deleteProjectBtn) {
                  // Habilitar/deshabilitar botón de eliminar según la selección
                  deleteProjectBtn.disabled = (selectedValue === 'all' || selectedValue === 'none');
             }
         }


        // Maneja la selección de un proyecto en el selector principal
        function handleProjectSelection() {
            const projectSelect = document.getElementById('project-select');
            const selectedValue = projectSelect.value;

             handleProjectSelectionState(selectedValue);

            // Filtrar la lista de registros de acceso rápido según el proyecto seleccionado
             console.log(`Filtrando acceso rápido por proyecto: ${selectedValue}`);
            loadQuickAccessList(selectedValue);
        }

        // --- GESTION Y EDICIÓN DE PROYECTOS (EN HERRAMIENTAS) ---

        // Carga los proyectos en la tabla de gestión
        function loadProjectsForManagement() {
            const projectsTableBody = document.querySelector('#projects-management-table tbody');
             if (!projectsTableBody) {
                 console.warn("Tabla de gestión de proyectos no encontrada.");
                 return; // Salir si la tabla no existe (p.ej. pestaña no activa)
             }

            const projects = loadFromStorage('chatlog_projects') || [];
            console.log(`Cargando ${projects.length} proyectos para gestión...`);

            if (projects.length === 0) {
                projectsTableBody.innerHTML = '<tr><td colspan="4" class="no-data-message">No hay proyectos disponibles</td></tr>';
                return;
            }

            // Ordenar proyectos por nombre
            projects.sort((a, b) => a.name.localeCompare(b.name));

            // Cargar registros para contar por proyecto
            const records = loadFromStorage('chatlog_records') || [];
            const recordCounts = {};

            records.forEach(record => {
                const projectId = record.projectId || 'none'; // Contar también los sin proyecto
                 if (!recordCounts[projectId]) {
                    recordCounts[projectId] = 0;
                 }
                recordCounts[projectId]++;
            });

            projectsTableBody.innerHTML = ''; // Limpiar tabla

            // Crear fila para cada proyecto
            projects.forEach(project => {
                const row = document.createElement('tr');
                 row.setAttribute('data-project-id', project.id); // Añadir ID para referencia

                // Nombre
                const nameCell = document.createElement('td');
                 nameCell.setAttribute('data-label', 'Nombre'); // Para accesibilidad/CSS
                nameCell.textContent = project.name;

                // Fecha de creación
                const dateCell = document.createElement('td');
                 dateCell.setAttribute('data-label', 'Fecha Creación');
                try {
                     const date = new Date(project.dateCreated);
                     // Usar formato localizado más robusto
                     dateCell.textContent = date.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' });
                } catch (e) {
                     dateCell.textContent = 'Fecha inválida'; // Manejar fechas incorrectas
                }


                // Número de registros
                const recordsCell = document.createElement('td');
                 recordsCell.setAttribute('data-label', 'Registros');
                recordsCell.textContent = recordCounts[project.id] || 0;

                // Acciones
                const actionsCell = document.createElement('td');
                 actionsCell.setAttribute('data-label', 'Acciones');
                const actionButtons = document.createElement('div');
                actionButtons.className = 'action-buttons';

                // Botón editar
                const editBtn = document.createElement('button');
                editBtn.className = 'edit-btn';
                editBtn.textContent = 'Editar';
                editBtn.setAttribute('aria-label', `Editar proyecto ${project.name}`);
                editBtn.addEventListener('click', (e) => {
                    e.stopPropagation(); // Evitar que el click se propague a la fila
                    editProject(project);
                });

                // Botón eliminar
                const deleteBtn = document.createElement('button');
                deleteBtn.className = 'delete-btn';
                deleteBtn.textContent = 'Eliminar';
                 deleteBtn.setAttribute('aria-label', `Eliminar proyecto ${project.name}`);
                deleteBtn.addEventListener('click', (e) => {
                     e.stopPropagation();
                     // Reutilizar la lógica de confirmación y eliminación
                     const associatedCount = recordCounts[project.id] || 0;
                     let confirmationMessage = `¿Estás seguro de que deseas eliminar el proyecto "${project.name}"?`;
                     if (associatedCount > 0) {
                         confirmationMessage += `\n\nEste proyecto tiene ${associatedCount} registro(s) asociado(s). Estos registros NO serán eliminados, pero perderán la asociación con este proyecto (quedarán como "Sin Proyecto").`;
                     }
                    if (confirm(confirmationMessage)) {
                        deleteProjectById(project.id, project.name);
                    }
                });

                actionButtons.appendChild(editBtn);
                actionButtons.appendChild(deleteBtn);
                actionsCell.appendChild(actionButtons);

                // Añadir celdas a la fila
                row.appendChild(nameCell);
                row.appendChild(dateCell);
                row.appendChild(recordsCell);
                row.appendChild(actionsCell);

                projectsTableBody.appendChild(row);
            });
             console.log('Tabla de gestión de proyectos actualizada.');
        }

        // Muestra el formulario para editar un proyecto
        function editProject(project) {
            const editForm = document.getElementById('edit-project-form');
            const projectIdInput = document.getElementById('edit-project-id');
            const projectNameInput = document.getElementById('edit-project-name');

             if (!editForm || !projectIdInput || !projectNameInput) {
                 console.error("Elementos del formulario de edición de proyecto no encontrados.");
                 return;
             }

            projectIdInput.value = project.id;
            projectNameInput.value = project.name;

            editForm.style.display = 'block';
            projectNameInput.focus();

            // Desplazarse al formulario
            editForm.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }

        // Guarda los cambios de edición de un proyecto
        function saveProjectEdit() {
            const projectId = document.getElementById('edit-project-id').value;
            const projectNameInput = document.getElementById('edit-project-name');
            const projectName = projectNameInput.value.trim();

            if (!projectName) {
                alert('Por favor, ingresa un nombre para el proyecto.');
                 projectNameInput.focus();
                return;
            }
             if (!projectId) {
                 console.error("No se encontró ID de proyecto para guardar.");
                 alert("Error: No se pudo identificar el proyecto a editar.");
                 return;
             }

            const projects = loadFromStorage('chatlog_projects') || [];

            // Verificar si ya existe otro proyecto con el mismo nombre (insensible a mayúsculas/minúsculas)
            if (projects.some(p => p.name.toLowerCase() === projectName.toLowerCase() && p.id !== projectId)) {
                alert('Ya existe otro proyecto con ese nombre.');
                 projectNameInput.focus();
                return;
            }

            let projectFound = false;
            // Encontrar y actualizar el proyecto
            const updatedProjects = projects.map(project => {
                if (project.id === projectId) {
                     projectFound = true;
                    return {
                        ...project,
                        name: projectName
                        // Podríamos añadir una fecha de modificación aquí si quisiéramos
                        // dateModified: new Date().toISOString()
                    };
                }
                return project;
            });

             if (!projectFound) {
                 console.error(`Proyecto con ID ${projectId} no encontrado para editar.`);
                 alert("Error: No se encontró el proyecto original para actualizar.");
                 return;
             }

            // Guardar y actualizar interfaz
            if (saveToStorage('chatlog_projects', updatedProjects)) {
                console.log(`Proyecto ID ${projectId} actualizado a nombre "${projectName}".`);
                alert('Proyecto actualizado correctamente.');

                // Actualizar interfaz
                loadProjects(); // Actualizar todos los selectores
                loadProjectsForManagement(); // Actualizar la tabla de gestión
                // No es necesario actualizar la gestión de registros aquí, ya que solo cambió el nombre del proyecto
                 // initRecordsManagement(); // Opcional si queremos forzar recarga completa

                // Ocultar formulario de edición
                cancelProjectEdit();
            } else {
                 alert('Error al guardar los cambios del proyecto.');
            }
        }

        // Cancelar la edición de un proyecto
        function cancelProjectEdit() {
            const editForm = document.getElementById('edit-project-form');
             if (editForm) {
                editForm.style.display = 'none';
                document.getElementById('edit-project-id').value = '';
                document.getElementById('edit-project-name').value = '';
             }
        }

        // --- SISTEMA DE CALIFICACIÓN ---

        // Inicializa el sistema de calificación por estrellas
        function initRatingSystem() {
            const ratingContainer = document.querySelector('.rating-container');
             if (!ratingContainer) return; // Salir si no existe

             const stars = ratingContainer.querySelectorAll('.star');
             const ratingText = ratingContainer.querySelector('.rating-text');
             const ratingValueInput = ratingContainer.querySelector('#rating-value'); // Usar el input oculto directamente

             if (!stars.length || !ratingText || !ratingValueInput) {
                 console.warn("Elementos del sistema de calificación no encontrados.");
                 return; // No continuar si faltan elementos clave
             }


            // Textos descriptivos para cada nivel de calificación
            const ratingDescriptions = [
                'Sin calificar', // 0 estrellas
                'Insatisfactorio', // 1 estrella
                'Mejorable', // 2 estrellas
                'Satisfactorio', // 3 estrellas
                'Bueno', // 4 estrellas
                'Excelente' // 5 estrellas
            ];

             // Función interna para actualizar la UI de estrellas
             function updateStarsUI(rating) {
                 stars.forEach(s => {
                     const starRating = parseInt(s.getAttribute('data-rating'));
                     if (starRating <= rating) {
                         s.classList.add('active');
                         s.classList.remove('hover'); // Quitar hover si está activo
                     } else {
                         s.classList.remove('active');
                     }
                 });
                 ratingText.textContent = ratingDescriptions[rating];
             }

            stars.forEach(star => {
                 const rating = parseInt(star.getAttribute('data-rating'));

                // Evento al hacer clic en una estrella
                star.addEventListener('click', function() {
                     ratingValueInput.value = rating; // Actualizar valor oculto
                     updateStarsUI(rating);
                });

                 // Evento hover para previsualizar
                 star.addEventListener('mouseover', function() {
                     const currentHoverRating = parseInt(this.getAttribute('data-rating'));
                     stars.forEach(s => {
                         const starRating = parseInt(s.getAttribute('data-rating'));
                         if (starRating <= currentHoverRating && !s.classList.contains('active')) {
                             s.classList.add('hover');
                         } else {
                             s.classList.remove('hover');
                         }
                     });
                     // Mostrar texto temporalmente (opcional)
                     // ratingText.textContent = `(${ratingDescriptions[currentHoverRating]})`;
                 });

                 // Evento para quitar el hover
                 star.addEventListener('mouseout', function() {
                      stars.forEach(s => s.classList.remove('hover'));
                      // Restaurar texto basado en el valor real
                      const currentRating = parseInt(ratingValueInput.value) || 0;
                      ratingText.textContent = ratingDescriptions[currentRating];
                 });
            });

            // Función global para cargar una calificación existente (usada al editar)
            window.loadRating = function(rating) {
                 const numericRating = parseInt(rating) || 0;
                 if (numericRating >= 0 && numericRating <= 5) {
                     ratingValueInput.value = numericRating;
                     updateStarsUI(numericRating);
                 } else {
                      console.warn(`Intento de cargar calificación inválida: ${rating}`);
                      ratingValueInput.value = 0;
                      updateStarsUI(0);
                 }

            };

             // Inicializar con valor 0
             window.loadRating(0);
             console.log('Sistema de calificación inicializado.');
        }

        // --- GESTIÓN DE REGISTROS (FORMULARIO PRINCIPAL) ---

        // Guarda un nuevo registro o actualiza uno existente
        function saveRecord() {
            console.log('Guardando registro...');
            // Obtener valores del formulario
            const recordId = document.getElementById('record-id').value;
            const interactionNameInput = document.getElementById('interaction-name');
            const purposeSelect = document.getElementById('purpose');
            const otherPurposeInput = document.getElementById('other-purpose');
            const llmNameInput = document.getElementById('llm-name');
            const llmVersionInput = document.getElementById('llm-version');
            const promptInput = document.getElementById('prompt');
            const interactionLinkInput = document.getElementById('interaction-link');
            const ethicalNotesInput = document.getElementById('ethical-notes');
            const biasNotesInput = document.getElementById('bias-notes');
            const observationsInput = document.getElementById('observations');
            const ratingInput = document.getElementById('rating-value');
            const projectSelect = document.getElementById('project-select');

             // Validar que los elementos existen
             if (!interactionNameInput || !purposeSelect || !otherPurposeInput || !llmNameInput || !promptInput || !ratingInput || !projectSelect) {
                  console.error("Faltan elementos clave del formulario.");
                  alert("Error interno: No se pudo encontrar el formulario completo.");
                  return;
             }


            const interactionName = interactionNameInput.value.trim();
            const purposeValue = purposeSelect.value;
            const purpose = purposeValue === 'Otro'
                ? otherPurposeInput.value.trim()
                : purposeValue;
            const llmName = llmNameInput.value.trim();
            const llmVersion = llmVersionInput ? llmVersionInput.value.trim() : '';
            const prompt = promptInput.value.trim();
            const interactionLink = interactionLinkInput ? interactionLinkInput.value.trim() : '';
            const ethicalNotes = ethicalNotesInput ? ethicalNotesInput.value.trim() : '';
            const biasNotes = biasNotesInput ? biasNotesInput.value.trim() : '';
            const observations = observationsInput ? observationsInput.value.trim() : '';
            const rating = ratingInput.value; // Ya es string '0' a '5'

            // Obtener proyecto seleccionado
            const selectedProject = projectSelect.value;
            // Asignar null si es 'all' o 'none', de lo contrario el ID del proyecto
            const projectId = (selectedProject && selectedProject !== 'all' && selectedProject !== 'none') ? selectedProject : null;

            // Validaciones básicas de campos obligatorios
            let errors = [];
            if (!interactionName) errors.push('Nombre de la Interacción');
            if (!purpose) errors.push('Finalidad de la Interacción');
            if (purposeValue === 'Otro' && !otherPurposeInput.value.trim()) errors.push('Especificar Otra Finalidad');
            if (!llmName) errors.push('Nombre del LLM');
            if (!prompt) errors.push('Prompt');

            if (errors.length > 0) {
                alert(`Por favor, completa los siguientes campos obligatorios:\n- ${errors.join('\n- ')}`);
                 // Enfocar el primer campo con error
                 if (!interactionName) interactionNameInput.focus();
                 else if (!purpose || (purposeValue === 'Otro' && !otherPurposeInput.value.trim())) purposeSelect.focus();
                 else if (!llmName) llmNameInput.focus();
                 else if (!prompt) promptInput.focus();
                return;
            }

            // Cargar registros existentes para determinar fecha de creación si es edición
             const records = loadFromStorage('chatlog_records') || [];
             const existingRecord = recordId ? records.find(r => r.id === recordId) : null;

            // Crear objeto de registro
            const record = {
                id: recordId || Date.now().toString() + Math.random().toString(36).substring(2, 8),
                interactionName,
                purpose,
                llmName,
                llmVersion,
                prompt,
                interactionLink,
                tags: [...currentTags], // Crear una copia de las etiquetas actuales
                ethicalNotes,
                biasNotes,
                observations,
                rating,
                projectId,
                dateCreated: existingRecord ? existingRecord.dateCreated : new Date().toISOString(), // Mantener fecha original si se edita
                dateModified: new Date().toISOString() // Siempre actualizar fecha de modificación
            };

            // Guardar el registro
            let updatedRecords;
            if (recordId && existingRecord) {
                // Actualización de registro existente
                 console.log(`Actualizando registro ID: ${recordId}`);
                updatedRecords = records.map(r => r.id === recordId ? record : r);
            } else {
                // Nuevo registro
                 console.log(`Creando nuevo registro ID: ${record.id}`);
                updatedRecords = [...records, record];
            }

            // Guardar y actualizar interfaz
            if (saveToStorage('chatlog_records', updatedRecords)) {
                resetRecordForm();
                loadQuickAccessList(projectSelect.value); // Recargar lista rápida con filtro actual
                updateAllTags(); // Recalcular todas las etiquetas disponibles

                // Actualizar tabla de registros si la pestaña Herramientas está activa
                 if (document.getElementById('tools')?.classList.contains('active')) {
                    loadRecordsForManagement();
                 }
                 // Actualizar estadísticas si la pestaña está activa
                 if (document.getElementById('stats')?.classList.contains('active')) {
                     loadStatistics();
                 }
                 // Actualizar declaración si la pestaña está activa
                  if (document.getElementById('declaration')?.classList.contains('active')) {
                     loadRecordsForDeclaration();
                 }


                alert(recordId ? 'Registro actualizado correctamente.' : 'Registro guardado correctamente.');
            } else {
                 alert(recordId? 'Error al actualizar el registro.' : 'Error al guardar el registro.');
            }
        }

        // Carga la lista de acceso rápido con los registros más recientes
        function loadQuickAccessList(projectFilterValue = null) {
             const quickAccessListContainer = document.getElementById('quick-access-list');
             if (!quickAccessListContainer) return;

             const noRecordsMessage = quickAccessListContainer.querySelector('#no-records-message');
             const recentRecordsList = quickAccessListContainer.querySelector('#recent-records');

             if (!noRecordsMessage || !recentRecordsList) {
                  console.error("Elementos de Acceso Rápido no encontrados.");
                  return;
             }


            let allRecords = loadFromStorage('chatlog_records') || [];
             console.log(`Cargando acceso rápido. Total registros: ${allRecords.length}. Filtro: ${projectFilterValue}`);


            // Filtrar por proyecto si es necesario
             let filteredRecords = allRecords;
            if (projectFilterValue && projectFilterValue !== 'all') {
                if (projectFilterValue === 'none') {
                    filteredRecords = allRecords.filter(record => !record.projectId);
                } else {
                    filteredRecords = allRecords.filter(record => record.projectId === projectFilterValue);
                }
            }
             console.log(`Registros después de filtrar por proyecto: ${filteredRecords.length}`);

            // Ordenar por fecha de modificación (más reciente primero)
            filteredRecords.sort((a, b) => new Date(b.dateModified) - new Date(a.dateModified));

            // Mostrar solo los 10 más recientes
            const recentRecords = filteredRecords.slice(0, 10);

            if (recentRecords.length === 0) {
                noRecordsMessage.style.display = 'block';
                recentRecordsList.innerHTML = '';
                 console.log('No hay registros para mostrar en acceso rápido.');
                return;
            }

            noRecordsMessage.style.display = 'none';
            recentRecordsList.innerHTML = ''; // Limpiar lista existente

            recentRecords.forEach(record => {
                const li = document.createElement('li');
                 li.setAttribute('data-record-id', record.id); // Usar ID para identificar al hacer click

                // Crear contenido del elemento de lista con el título y calificación
                const titleSpan = document.createElement('span');
                titleSpan.textContent = record.interactionName || 'Registro sin nombre'; // Nombre por defecto
                 titleSpan.style.marginRight = '10px'; // Espacio antes de las estrellas

                li.appendChild(titleSpan);

                // Mostrar estrellas si hay calificación
                if (record.rating && parseInt(record.rating) > 0) {
                    const ratingSpan = document.createElement('span');
                    ratingSpan.className = 'list-rating'; // Clase para posible estilo
                    ratingSpan.innerHTML = '★'.repeat(parseInt(record.rating));
                    ratingSpan.style.color = 'var(--star-active)';
                    ratingSpan.style.fontSize = '0.9em';
                    li.appendChild(ratingSpan);
                }

                li.addEventListener('click', function() {
                     const recordIdToLoad = this.getAttribute('data-record-id');
                     console.log(`Acceso rápido: Cargando registro ID ${recordIdToLoad} para editar.`);
                    loadRecordForEdit(recordIdToLoad);
                });

                recentRecordsList.appendChild(li);
            });
             console.log(`Mostrando ${recentRecords.length} registros en acceso rápido.`);
        }


        // Carga un registro para editarlo en el formulario principal
        function loadRecordForEdit(recordId) {
             if (!recordId) {
                 console.error("Se intentó cargar un registro para editar sin ID.");
                 return;
             }

            const records = loadFromStorage('chatlog_records') || [];
            const record = records.find(r => r.id === recordId);

            if (!record) {
                alert('Error: No se pudo encontrar el registro seleccionado para editar.');
                 console.error(`Registro con ID ${recordId} no encontrado.`);
                return;
            }

             console.log(`Cargando datos del registro ID ${recordId} en el formulario.`);

             // Cambiar a la pestaña principal si no está activa
             const mainTabButton = document.querySelector('.tab-button[data-tab="main"]');
             if (mainTabButton && !mainTabButton.classList.contains('active')) {
                 mainTabButton.click(); // Simular click para cambiar de pestaña
             }


            // Cambiar título del formulario
            const formTitle = document.getElementById('form-title');
             if (formTitle) formTitle.textContent = 'Editar Registro';

            // Llenar formulario con datos del registro
            document.getElementById('record-id').value = record.id;
            document.getElementById('interaction-name').value = record.interactionName;

            // Manejar finalidad (incluyendo 'Otro')
            const purposeField = document.getElementById('purpose');
            const otherPurposeContainer = document.getElementById('other-purpose-container');
            const otherPurposeInput = document.getElementById('other-purpose');
             if (purposeField.querySelector(`option[value="${record.purpose}"]`)) {
                purposeField.value = record.purpose;
                 otherPurposeContainer.style.display = 'none';
                 otherPurposeInput.value = ''; // Limpiar por si acaso
                 otherPurposeInput.required = false; // No requerido si no es 'Otro'
            } else {
                 // Si el valor guardado no está en las opciones, asumir que es 'Otro'
                purposeField.value = 'Otro';
                 otherPurposeContainer.style.display = 'block';
                otherPurposeInput.value = record.purpose; // Poner el valor personalizado
                 otherPurposeInput.required = true; // Requerido si es 'Otro'
            }

            document.getElementById('llm-name').value = record.llmName;
            document.getElementById('llm-version').value = record.llmVersion || '';
            document.getElementById('prompt').value = record.prompt;
            document.getElementById('interaction-link').value = record.interactionLink || '';
            document.getElementById('ethical-notes').value = record.ethicalNotes || '';
            document.getElementById('bias-notes').value = record.biasNotes || '';
            document.getElementById('observations').value = record.observations || '';

            // Cargar la calificación si existe (usando la función global)
             if (window.loadRating) {
                 window.loadRating(record.rating || 0);
             }


            // Actualizar etiquetas
            currentTags = Array.isArray(record.tags) ? [...record.tags] : []; // Asegurar que es un array y clonar
            updateTagsList(); // Actualizar UI de etiquetas

            // Seleccionar proyecto si existe
            const projectSelect = document.getElementById('project-select');
             if (projectSelect) {
                 if (record.projectId && projectSelect.querySelector(`option[value="${record.projectId}"]`)) {
                    projectSelect.value = record.projectId;
                 } else {
                    projectSelect.value = 'none'; // Si no tiene proyecto o el proyecto ya no existe
                 }
                 handleProjectSelectionState(projectSelect.value); // Actualizar botón borrar
             }


            // Mostrar botón de cancelar edición
            const cancelBtn = document.getElementById('cancel-edit-btn');
            if (cancelBtn) cancelBtn.style.display = 'inline-block';

            // Cambiar texto del botón guardar
            const saveBtn = document.getElementById('save-record-btn');
             if(saveBtn) saveBtn.textContent = 'Actualizar Registro';

            // Desplazarse al formulario para visibilidad
            if (formTitle) {
                 formTitle.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
             console.log('Formulario llenado para edición.');
        }


        // Restablecer el formulario de registro a su estado inicial
        function resetRecordForm() {
             console.log('Reseteando formulario de registro.');
            const form = document.getElementById('record-form');
             if (form) form.reset(); // Resetea los campos del formulario HTML

            document.getElementById('record-id').value = ''; // Limpiar ID oculto
            const formTitle = document.getElementById('form-title');
            if (formTitle) formTitle.textContent = 'Nuevo Registro';

             // Ocultar campo "Otro" de finalidad
            const otherPurposeContainer = document.getElementById('other-purpose-container');
            if (otherPurposeContainer) otherPurposeContainer.style.display = 'none';
             const otherPurposeInput = document.getElementById('other-purpose');
             if (otherPurposeInput) {
                 otherPurposeInput.value = '';
                 otherPurposeInput.required = false;
             }


            // Ocultar botón de cancelar edición
            const cancelBtn = document.getElementById('cancel-edit-btn');
            if (cancelBtn) cancelBtn.style.display = 'none';

             // Restaurar texto del botón guardar
            const saveBtn = document.getElementById('save-record-btn');
            if(saveBtn) saveBtn.textContent = 'Guardar Registro';

            // Resetear etiquetas
            currentTags = [];
            updateTagsList();

            // Resetear calificación (usando la función global)
            if (window.loadRating) {
                 window.loadRating(0);
            }


             // Podríamos querer resetear la selección de proyecto a 'Todos' o 'Sin Proyecto'
             // const projectSelect = document.getElementById('project-select');
             // if (projectSelect) projectSelect.value = 'all';
             // handleProjectSelectionState('all');

             console.log('Formulario reseteado.');
        }

        // Cancelar la edición de un registro (simplemente resetea el formulario)
        function cancelEditRecord() {
             console.log('Cancelando edición de registro.');
            resetRecordForm();
        }

        // --- GESTIÓN Y EDICIÓN DE REGISTROS (EN HERRAMIENTAS) ---

        // Inicializa los filtros para la gestión de registros
        function initRecordsManagementFilters() {
            const projectFilter = document.getElementById('records-project-filter');
            // const sortBySelect = document.getElementById('records-sort-by'); // Ya está en HTML

             if (!projectFilter) return;

            // Cargar proyectos para el filtro (reutiliza loadProjects, pero aquí aseguramos 'Sin proyecto')
            const projects = loadFromStorage('chatlog_projects') || [];

            // Limpiar opciones existentes (excepto "Todos los proyectos")
             const allOption = projectFilter.options.length > 0 ? projectFilter.options[0].cloneNode(true) : null;
             projectFilter.innerHTML = ''; // Limpiar
             if (allOption) projectFilter.appendChild(allOption);


            // Asegurar que "Sin proyecto" existe
            if (!Array.from(projectFilter.options).some(opt => opt.value === 'none')) {
                const noneOption = document.createElement('option');
                noneOption.value = 'none';
                noneOption.textContent = 'Sin proyecto';
                projectFilter.appendChild(noneOption);
            }

            // Agregar proyectos ordenados
             projects.sort((a, b) => a.name.localeCompare(b.name));
            projects.forEach(project => {
                const option = document.createElement('option');
                option.value = project.id;
                option.textContent = project.name;
                projectFilter.appendChild(option);
            });

             console.log("Filtros de gestión de registros inicializados.");
            // No cargamos los registros aquí, solo al seleccionar la pestaña o cambiar filtros
             // loadRecordsForManagement();
        }

        // Carga los registros agrupados por proyecto en la pestaña Herramientas
        function loadRecordsForManagement() {
             const recordsContainer = document.getElementById('records-by-project');
             if (!recordsContainer) {
                  console.warn("Contenedor de gestión de registros no encontrado.");
                  return; // Salir si no existe
             }
             console.log('Cargando registros para gestión...');

            const allRecords = loadFromStorage('chatlog_records') || [];
            const projects = loadFromStorage('chatlog_projects') || [];
            const projectFilter = document.getElementById('records-project-filter')?.value || 'all';
            const sortBy = document.getElementById('records-sort-by')?.value || 'date-desc';

            if (allRecords.length === 0) {
                recordsContainer.innerHTML = '<div class="no-data-message">No hay registros disponibles</div>';
                return;
            }

            // Mapear proyectos por ID para referencia rápida
            const projectsMap = {};
            projects.forEach(project => {
                projectsMap[project.id] = project.name;
            });

            // Filtrar registros por proyecto si es necesario
            let filteredRecords = [...allRecords];
            if (projectFilter !== 'all') {
                if (projectFilter === 'none') {
                    filteredRecords = allRecords.filter(record => !record.projectId);
                } else {
                    filteredRecords = allRecords.filter(record => record.projectId === projectFilter);
                }
            }
             console.log(`Filtrando por proyecto ${projectFilter}. Registros restantes: ${filteredRecords.length}`);

            // Ordenar registros según la opción seleccionada
            sortRecords(filteredRecords, sortBy);
             console.log(`Ordenando por ${sortBy}.`);

            // Agrupar registros por proyecto
            const recordsByProject = {};

            // Crear un grupo "Sin proyecto" para registros sin proyecto asignado
            recordsByProject['none'] = {
                name: 'Sin proyecto',
                records: []
            };

            // Crear grupos para cada proyecto existente (o encontrado en los registros)
            filteredRecords.forEach(record => {
                 const projectId = record.projectId || 'none';
                 if (!recordsByProject[projectId]) {
                     recordsByProject[projectId] = {
                         name: projectId === 'none' ? 'Sin proyecto' : (projectsMap[projectId] || `Proyecto Desconocido (${projectId.substring(0,6)}...)`),
                         records: []
                     };
                 }
                 recordsByProject[projectId].records.push(record);
            });


            // Construir la interfaz de usuario
            recordsContainer.innerHTML = ''; // Limpiar contenedor

            // Obtener el orden de los proyectos (podría ser alfabético o por ID)
             const projectOrder = Object.keys(recordsByProject).sort((a, b) => {
                 if (a === 'none') return 1; // "Sin proyecto" al final
                 if (b === 'none') return -1;
                 return recordsByProject[a].name.localeCompare(recordsByProject[b].name); // Orden alfabético
             });

            // Iterar por todos los grupos de proyectos en el orden definido
            projectOrder.forEach(projectId => {
                const projectGroup = recordsByProject[projectId];

                // Omitir grupos sin registros
                if (projectGroup.records.length === 0) return;

                // Crear elemento de grupo de proyecto
                const groupElement = document.createElement('div');
                groupElement.className = 'project-group';

                // Crear encabezado del proyecto
                const headerElement = document.createElement('div');
                headerElement.className = 'project-header';
                headerElement.setAttribute('data-project-id', projectId); // ID para referencia
                headerElement.innerHTML = `
                    <div class="project-name">${projectGroup.name}</div>
                    <div class="project-count">${projectGroup.records.length} ${projectGroup.records.length === 1 ? 'registro' : 'registros'}</div>
                `;

                // Crear contenedor de registros (inicialmente oculto)
                const recordsListElement = document.createElement('div');
                recordsListElement.className = 'project-records'; // Sin 'expanded' por defecto

                 // Event listener para expandir/contraer (añadido aquí para asegurar que recordsListElement existe)
                 headerElement.addEventListener('click', function() {
                     // const recordsList = this.nextElementSibling; // Podría ser frágil si cambia HTML
                     recordsListElement.classList.toggle('expanded');
                     // Podríamos añadir un icono +/- aquí
                 });


                // Agregar registros al contenedor
                projectGroup.records.forEach(record => {
                    const recordElement = createRecordElement(record, projectsMap); // Usar función auxiliar
                    recordsListElement.appendChild(recordElement);
                });

                // Ensamblar todo
                groupElement.appendChild(headerElement);
                groupElement.appendChild(recordsListElement);
                recordsContainer.appendChild(groupElement);
            });

            // Si no hay registros después de aplicar filtros
            if (recordsContainer.children.length === 0) {
                recordsContainer.innerHTML = '<div class="no-data-message">No hay registros que coincidan con los filtros aplicados</div>';
            }
             console.log('Interfaz de gestión de registros actualizada.');
        }

        // Crea un elemento HTML para un registro individual en la lista de gestión
        function createRecordElement(record, projectsMap) {
            const recordElement = document.createElement('div');
            recordElement.className = 'record-row';
            recordElement.setAttribute('data-record-id', record.id);

            // Información del registro
            const infoElement = document.createElement('div');
            infoElement.className = 'record-info';

            // Nombre con calificación
            const nameElement = document.createElement('div');
            nameElement.className = 'record-name';
            nameElement.textContent = record.interactionName || 'Registro sin nombre'; // Nombre por defecto

            // Agregar estrellas si hay calificación
            if (record.rating && parseInt(record.rating) > 0) {
                const ratingSpan = document.createElement('span');
                ratingSpan.className = 'record-rating';
                ratingSpan.innerHTML = '★'.repeat(parseInt(record.rating));
                nameElement.appendChild(ratingSpan); // Añadir al final del nombre
            }

            // Detalles adicionales
            const detailsElement = document.createElement('div');
            detailsElement.className = 'record-details';

            // Formatear fecha
            let formattedDate = 'Fecha inválida';
             try {
                 const recordDate = new Date(record.dateModified || record.dateCreated); // Usar modificación, si no, creación
                 formattedDate = recordDate.toLocaleDateString(undefined, {
                    year: 'numeric', month: 'short', day: 'numeric'
                 });
             } catch(e) { /* Mantener 'Fecha inválida' */ }


            detailsElement.textContent = `${record.llmName || 'Modelo desc.'} - ${formattedDate}`;

            infoElement.appendChild(nameElement);
            infoElement.appendChild(detailsElement);

            // Acciones del registro
            const actionsElement = document.createElement('div');
            actionsElement.className = 'record-actions';

            // Botón editar
            const editBtn = document.createElement('button');
            editBtn.className = 'edit-btn';
            editBtn.textContent = 'Editar';
             editBtn.setAttribute('aria-label', `Editar registro ${record.interactionName}`);
            editBtn.addEventListener('click', function(e) {
                e.stopPropagation(); // Evitar que se expanda/colapse el grupo
                console.log(`Editando registro ID ${record.id} desde herramientas.`);
                editRecord(record.id); // Reutilizar función para cargar en formulario principal
            });

            // Botón eliminar
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'delete-btn';
            deleteBtn.textContent = 'Eliminar';
             deleteBtn.setAttribute('aria-label', `Eliminar registro ${record.interactionName}`);
            deleteBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                if (confirm(`¿Estás seguro de que deseas eliminar el registro "${record.interactionName || 'este registro'}"? Esta acción no se puede deshacer.`)) {
                    console.log(`Eliminando registro ID ${record.id} desde herramientas.`);
                    deleteRecord(record.id); // Reutilizar función de borrado
                }
            });

            actionsElement.appendChild(editBtn);
            actionsElement.appendChild(deleteBtn);

            // Ensamblar el elemento completo
            recordElement.appendChild(infoElement);
            recordElement.appendChild(actionsElement);

            return recordElement;
        }

        // Ordena un array de registros según el criterio seleccionado
        function sortRecords(records, sortBy) {
             if (!Array.isArray(records)) return; // No hacer nada si no es un array

            switch (sortBy) {
                case 'date-desc':
                    records.sort((a, b) => new Date(b.dateModified || 0) - new Date(a.dateModified || 0));
                    break;
                case 'date-asc':
                    records.sort((a, b) => new Date(a.dateModified || 0) - new Date(b.dateModified || 0));
                    break;
                case 'rating-desc':
                    records.sort((a, b) => {
                        const ratingA = parseInt(a.rating) || 0;
                        const ratingB = parseInt(b.rating) || 0;
                        // Si las calificaciones son iguales, ordenar por fecha descendente como secundario
                        if (ratingB === ratingA) {
                             return new Date(b.dateModified || 0) - new Date(a.dateModified || 0);
                        }
                        return ratingB - ratingA;
                    });
                    break;
                case 'rating-asc':
                    records.sort((a, b) => {
                        const ratingA = parseInt(a.rating) || 0;
                        const ratingB = parseInt(b.rating) || 0;
                         // Si las calificaciones son iguales, ordenar por fecha descendente como secundario
                         if (ratingA === ratingB) {
                             return new Date(b.dateModified || 0) - new Date(a.dateModified || 0);
                         }
                        return ratingA - ratingB;
                    });
                    break;
                case 'name':
                    records.sort((a, b) => (a.interactionName || '').localeCompare(b.interactionName || ''));
                    break;
                 default: // Por defecto, ordenar por fecha descendente
                     records.sort((a, b) => new Date(b.dateModified || 0) - new Date(a.dateModified || 0));
                     break;

            }
        }

        // Edita un registro existente (navega a la pestaña principal y carga)
        function editRecord(recordId) {
             if (!recordId) return;
            // Cambiar a la pestaña principal
            const mainTabButton = document.querySelector('.tab-button[data-tab="main"]');
             if (mainTabButton && !mainTabButton.classList.contains('active')) {
                 mainTabButton.click(); // Simula click para cambiar
                 // Esperar un instante para que la pestaña cambie antes de cargar
                 setTimeout(() => loadRecordForEdit(recordId), 50);
             } else {
                 // Si ya está en la pestaña principal, cargar directamente
                 loadRecordForEdit(recordId);
             }
        }


        // Elimina un registro por ID
        function deleteRecord(recordId) {
             if (!recordId) return;

            const records = loadFromStorage('chatlog_records') || [];
            const initialLength = records.length;
            const filteredRecords = records.filter(record => record.id !== recordId);

             // Verificar si realmente se eliminó algo
             if (filteredRecords.length === initialLength) {
                 console.warn(`Se intentó eliminar el registro ID ${recordId}, pero no se encontró.`);
                 alert("Error: No se encontró el registro a eliminar.");
                 return;
             }

            if (saveToStorage('chatlog_records', filteredRecords)) {
                 console.log(`Registro ID ${recordId} eliminado.`);
                // Recargar listas y contadores relevantes
                loadRecordsForManagement(); // Actualizar lista en herramientas
                loadQuickAccessList(document.getElementById('project-select')?.value); // Actualizar acceso rápido
                updateAllTags(); // Recalcular etiquetas
                 updateStorageUsage(); // Actualizar uso de almacenamiento

                 // Actualizar otras pestañas si están activas
                 if (document.getElementById('stats')?.classList.contains('active')) loadStatistics();
                 if (document.getElementById('declaration')?.classList.contains('active')) loadRecordsForDeclaration();

                alert('Registro eliminado correctamente.');
            } else {
                 alert('Error al eliminar el registro.');
            }
        }


        // --- SISTEMA DE ETIQUETAS ---

        // Inicializa el sistema de etiquetas
        function initTagsSystem() {
            // Cargar todas las etiquetas existentes al inicio
            updateAllTags();

            const tagsInput = document.getElementById('tags-input');
            const tagsList = document.getElementById('tags-list');
            const tagsSuggestions = document.getElementById('tags-suggestions');

             if (!tagsInput || !tagsList || !tagsSuggestions) {
                 console.warn("Elementos del sistema de etiquetas no encontrados.");
                 return; // Salir si faltan elementos
             }

            // Event listener para añadir etiquetas al presionar Enter o Coma
            tagsInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' || e.key === ',') {
                    e.preventDefault(); // Evitar que Enter envíe el formulario o Coma se escriba
                    const tagValue = this.value.trim();
                    if (tagValue) { // Solo añadir si no está vacío
                        addTag(tagValue);
                        this.value = ''; // Limpiar input
                         tagsSuggestions.style.display = 'none'; // Ocultar sugerencias
                    }
                } else if (e.key === 'Backspace' && this.value === '' && currentTags.length > 0) {
                     // Si se presiona Backspace en un input vacío y hay etiquetas, eliminar la última
                     removeTag(currentTags[currentTags.length - 1]);
                }
            });

            // Event listener para mostrar/ocultar sugerencias
            tagsInput.addEventListener('keyup', function(e) {
                // Ignorar teclas que no modifican el texto o son de navegación
                 const ignoredKeys = ['Enter', ',', 'Shift', 'Control', 'Alt', 'CapsLock', 'Tab', 'Escape', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Backspace'];
                 if (ignoredKeys.includes(e.key)) {
                     return; // No hacer nada con estas teclas
                 }


                const inputVal = this.value.trim();
                if (inputVal.length > 0) {
                    showTagSuggestions(inputVal);
                } else {
                    tagsSuggestions.style.display = 'none';
                }
            });

             // Evento focus para mostrar sugerencias si hay texto
             tagsInput.addEventListener('focus', function() {
                 const inputVal = this.value.trim();
                 if (inputVal.length > 0) {
                     showTagSuggestions(inputVal);
                 }
             });


            // Ocultar sugerencias al hacer clic fuera del input o de las sugerencias
             // Usar 'blur' en el input es más simple pero puede cerrarse antes de click en sugerencia
             /* tagsInput.addEventListener('blur', function() {
                 // Retrasar el ocultamiento para permitir click en sugerencia
                 setTimeout(() => {
                      if (!tagsSuggestions.matches(':hover')) { // Si el mouse no está sobre las sugerencias
                           tagsSuggestions.style.display = 'none';
                      }
                 }, 150);
             }); */
             // Alternativa: Click global
             document.addEventListener('click', function(e) {
                 const tagsContainer = tagsInput.closest('.tags-container');
                 if (tagsContainer && !tagsContainer.contains(e.target)) {
                     tagsSuggestions.style.display = 'none';
                 }
             });

             console.log('Sistema de etiquetas inicializado.');
        }

        // Actualiza la lista global 'allTags' desde el almacenamiento
        function updateAllTags() {
            const records = loadFromStorage('chatlog_records') || [];
            const tagsSet = new Set();

            records.forEach(record => {
                if (record.tags && Array.isArray(record.tags)) {
                    record.tags.forEach(tag => {
                         if(tag && typeof tag === 'string') { // Asegurar que la etiqueta es válida
                              tagsSet.add(tag.trim());
                         }
                    });
                }
            });

            allTags = Array.from(tagsSet).sort((a, b) => a.localeCompare(b)); // Ordenar alfabéticamente
             console.log(`Etiquetas globales actualizadas: ${allTags.length} etiquetas únicas.`);
             // console.log(allTags); // Descomentar para depurar
        }

        // Muestra sugerencias de etiquetas basadas en la entrada
        function showTagSuggestions(input) {
             const tagsSuggestions = document.getElementById('tags-suggestions');
             if (!tagsSuggestions) return;

            const inputLower = input.toLowerCase();
            const suggestions = allTags.filter(tag =>
                tag.toLowerCase().includes(inputLower) && !currentTags.includes(tag) // No sugerir las ya añadidas
            ).slice(0, 10); // Limitar a 10 sugerencias

            if (suggestions.length === 0) {
                tagsSuggestions.style.display = 'none';
                return;
            }

            tagsSuggestions.innerHTML = ''; // Limpiar sugerencias anteriores

            suggestions.forEach(suggestion => {
                const div = document.createElement('div');
                div.className = 'suggestion-item';
                // Resaltar la parte coincidente (opcional)
                 const startIndex = suggestion.toLowerCase().indexOf(inputLower);
                 if (startIndex !== -1) {
                     div.innerHTML = suggestion.substring(0, startIndex) +
                                      `<strong>${suggestion.substring(startIndex, startIndex + input.length)}</strong>` +
                                      suggestion.substring(startIndex + input.length);
                 } else {
                      div.textContent = suggestion; // Sin resaltado si falla
                 }


                div.addEventListener('mousedown', function(e) { // Usar mousedown para que se dispare antes que el blur del input
                     e.preventDefault(); // Evitar que el input pierda foco inmediatamente
                    addTag(suggestion);
                    document.getElementById('tags-input').value = ''; // Limpiar input
                     tagsSuggestions.style.display = 'none'; // Ocultar
                     document.getElementById('tags-input').focus(); // Devolver foco al input
                });

                tagsSuggestions.appendChild(div);
            });

            tagsSuggestions.style.display = 'block';
        }

        // Añade una etiqueta a la lista 'currentTags' y actualiza la UI
        function addTag(tag) {
            tag = tag.trim(); // Limpiar espacios

            if (!tag || tag.length === 0) return; // No añadir etiquetas vacías

            // Convertir a minúsculas para comparación y almacenamiento consistentes (opcional)
            // tag = tag.toLowerCase();

            // Evitar duplicados (insensible a mayúsculas/minúsculas si se convirtió antes)
            if (!currentTags.some(existingTag => existingTag.toLowerCase() === tag.toLowerCase())) {
                 if (currentTags.length >= 20) { // Limitar número de etiquetas por registro (opcional)
                      alert("Se ha alcanzado el límite de 20 etiquetas por registro.");
                      return;
                 }
                currentTags.push(tag);
                updateTagsList(); // Actualizar UI
                document.getElementById('tags').value = JSON.stringify(currentTags); // Actualizar valor oculto (no necesario si no se usa)

                // Actualizar lista global 'allTags' si es una etiqueta nueva
                if (!allTags.some(globalTag => globalTag.toLowerCase() === tag.toLowerCase())) {
                    allTags.push(tag);
                    allTags.sort((a, b) => a.localeCompare(b)); // Mantener ordenado
                     console.log(`Nueva etiqueta global añadida: ${tag}`);
                }
                 console.log(`Etiqueta añadida: ${tag}. Actuales:`, currentTags);
            } else {
                 console.log(`Etiqueta "${tag}" ya existe.`);
            }
        }

        // Elimina una etiqueta de 'currentTags' y actualiza la UI
        function removeTag(tagToRemove) {
            // Buscar por valor (insensible a mayúsculas si es necesario)
             const index = currentTags.findIndex(tag => tag.toLowerCase() === tagToRemove.toLowerCase());

            if (index !== -1) {
                 const removed = currentTags.splice(index, 1);
                updateTagsList(); // Actualizar UI
                document.getElementById('tags').value = JSON.stringify(currentTags); // Actualizar valor oculto
                 console.log(`Etiqueta eliminada: ${removed[0]}. Actuales:`, currentTags);
                 // No eliminamos de allTags aquí, ya que podría estar en otros registros
            } else {
                 console.warn(`Intento de eliminar etiqueta no encontrada: ${tagToRemove}`);
            }
        }

        // Actualiza la visualización de las etiquetas actuales en el formulario
        function updateTagsList() {
            const tagsListElement = document.getElementById('tags-list');
             if (!tagsListElement) return;

            tagsListElement.innerHTML = ''; // Limpiar

            currentTags.forEach(tag => {
                const tagElement = document.createElement('div');
                tagElement.className = 'tag-item';

                const tagText = document.createElement('span');
                tagText.textContent = tag;

                const removeBtn = document.createElement('span');
                removeBtn.className = 'tag-remove';
                removeBtn.innerHTML = '&times;'; // Usar entidad HTML para 'x'
                 removeBtn.setAttribute('aria-label', `Eliminar etiqueta ${tag}`);
                 removeBtn.setAttribute('role', 'button');
                 removeBtn.tabIndex = 0; // Hacer enfocable
                removeBtn.addEventListener('click', function() {
                    removeTag(tag);
                });
                 removeBtn.addEventListener('keydown', function(e) {
                      if (e.key === 'Enter' || e.key === ' ') {
                          removeTag(tag);
                          document.getElementById('tags-input').focus(); // Devolver foco al input
                      }
                 });


                tagElement.appendChild(tagText);
                tagElement.appendChild(removeBtn);
                tagsListElement.appendChild(tagElement);
            });
        }

        // --- MANEJO DEL CAMPO "OTRO" EN FINALIDAD ---

        // Inicializa el comportamiento del campo "Otro" en finalidad
        function initOtherPurposeField() {
            const purposeSelect = document.getElementById('purpose');
            const otherContainer = document.getElementById('other-purpose-container');
            const otherInput = document.getElementById('other-purpose');

             if (!purposeSelect || !otherContainer || !otherInput) {
                 console.warn("Elementos del campo 'Otra Finalidad' no encontrados.");
                 return;
             }

            purposeSelect.addEventListener('change', function() {
                if (this.value === 'Otro') {
                    otherContainer.style.display = 'block';
                     otherInput.required = true; // Hacer requerido
                     otherInput.focus(); // Poner foco en el campo
                } else {
                    otherContainer.style.display = 'none';
                     otherInput.required = false; // No requerido
                     otherInput.value = ''; // Limpiar valor por si acaso
                }
            });
             console.log("Campo 'Otra Finalidad' inicializado.");
        }


        // --- DECLARACIÓN DE USO ---

        // Carga los proyectos para el filtro de declaración (reutiliza loadProjects)
        function loadDeclarationProjects() {
            // La función loadProjects() ya actualiza este selector
             console.log("Filtro de proyectos para declaración actualizado por loadProjects().");
        }

        // Carga los registros disponibles para seleccionar en la declaración
        function loadRecordsForDeclaration() {
            const recordsListContainer = document.getElementById('records-list');
            const noRecordsMessage = document.getElementById('no-declaration-records-message');

             if (!recordsListContainer || !noRecordsMessage) {
                  console.error("Elementos de la lista de declaración no encontrados.");
                  return;
             }
             console.log("Cargando registros para declaración...");

            const allRecords = loadFromStorage('chatlog_records') || [];

            if (allRecords.length === 0) {
                noRecordsMessage.style.display = 'block';
                recordsListContainer.innerHTML = '';
                selectedRecords = []; // Asegurar que la selección esté vacía
                return;
            }

            noRecordsMessage.style.display = 'none';
            recordsListContainer.innerHTML = ''; // Limpiar antes de filtrar y añadir

            // Filtrar por proyecto seleccionado
            filterRecordsForDeclaration(); // Esta función ahora también renderiza la lista
        }


        // Filtra y muestra los registros para la declaración según el proyecto seleccionado
        function filterRecordsForDeclaration() {
            const projectFilter = document.getElementById('declaration-project-select')?.value || 'all';
            const recordsList = document.getElementById('records-list');
            const noRecordsMessage = document.getElementById('no-declaration-records-message');

             if (!recordsList || !noRecordsMessage) return; // Salir si no existen los elementos

             console.log(`Filtrando registros para declaración por proyecto: ${projectFilter}`);

            let allRecords = loadFromStorage('chatlog_records') || [];
             let filteredRecords = [...allRecords]; // Clonar para no modificar el original

            // Aplicar filtro de proyecto
            if (projectFilter !== 'all') {
                if (projectFilter === 'none') {
                    filteredRecords = allRecords.filter(record => !record.projectId);
                } else {
                    filteredRecords = allRecords.filter(record => record.projectId === projectFilter);
                }
            }

            // Ordenar por proyecto y luego por fecha (más reciente primero)
            filteredRecords.sort((a, b) => {
                 // Primero agrupar por proyecto (los sin proyecto al final)
                 const projectA = a.projectId || 'zzz'; // 'zzz' asegura que 'none' vaya después
                 const projectB = b.projectId || 'zzz';

                 if (projectA !== projectB) {
                     // Aquí necesitamos los nombres de los proyectos para ordenar alfabéticamente
                     const projects = loadFromStorage('chatlog_projects') || [];
                     const nameA = projectA === 'zzz' ? 'Sin proyecto' : (projects.find(p => p.id === projectA)?.name || 'Proyecto Desconocido');
                     const nameB = projectB === 'zzz' ? 'Sin proyecto' : (projects.find(p => p.id === projectB)?.name || 'Proyecto Desconocido');
                     return nameA.localeCompare(nameB);
                 }

                // Si están en el mismo proyecto, ordenar por fecha de modificación (más reciente primero)
                return new Date(b.dateModified || 0) - new Date(a.dateModified || 0);
            });


             recordsList.innerHTML = ''; // Limpiar la lista actual

            if (filteredRecords.length === 0) {
                noRecordsMessage.style.display = 'block';
                recordsList.innerHTML = ''; // Asegurar que esté vacío
                 // No resetear selectedRecords aquí, podría haber una selección previa con otro filtro
                return;
            }

            noRecordsMessage.style.display = 'none';

            // Cargar todos los proyectos para mostrar nombres
            const projects = loadFromStorage('chatlog_projects') || [];
            const projectsMap = {};
            projects.forEach(project => {
                projectsMap[project.id] = project.name;
            });

            // Crear elementos de la lista para los registros filtrados
            filteredRecords.forEach(record => {
                const recordItem = document.createElement('div');
                recordItem.className = 'record-item';

                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'record-checkbox';
                checkbox.value = record.id;
                 // Marcar si este registro estaba previamente seleccionado
                checkbox.checked = selectedRecords.includes(record.id);
                 checkbox.setAttribute('aria-label', `Seleccionar registro ${record.interactionName}`);

                checkbox.addEventListener('change', function() {
                     const recordId = this.value;
                    if (this.checked) {
                        if (!selectedRecords.includes(recordId)) {
                            selectedRecords.push(recordId);
                        }
                    } else {
                        selectedRecords = selectedRecords.filter(id => id !== recordId); // Forma más segura de eliminar
                    }
                     console.log("Registros seleccionados para declaración:", selectedRecords);
                });

                const recordInfo = document.createElement('div');
                recordInfo.className = 'record-info';

                const recordTitle = document.createElement('div');
                recordTitle.className = 'record-title';
                 recordTitle.textContent = record.interactionName || 'Registro sin nombre'; // Título base

                // Agregar calificación al título si existe
                if (record.rating && parseInt(record.rating) > 0) {
                    const ratingSpan = document.createElement('span');
                    ratingSpan.innerHTML = '&nbsp;' + '★'.repeat(parseInt(record.rating)); // Añadir espacio antes
                    ratingSpan.style.color = 'var(--star-active)';
                    ratingSpan.style.fontSize = '0.9em';
                    recordTitle.appendChild(ratingSpan); // Añadir al final del título
                }


                const recordDetails = document.createElement('div');
                recordDetails.className = 'record-details';

                // Formatear fecha
                 let formattedDate = 'Fecha desc.';
                 try {
                     const recordDate = new Date(record.dateModified || record.dateCreated);
                     formattedDate = recordDate.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' });
                 } catch(e) {}

                // Obtener nombre del proyecto
                let projectName = 'Sin proyecto';
                if (record.projectId && projectsMap[record.projectId]) {
                    projectName = projectsMap[record.projectId];
                }

                recordDetails.textContent = `${record.llmName || 'Mod.Desc.'} (${record.purpose || 'Fin.Desc.'}) - ${formattedDate} - ${projectName}`;

                recordInfo.appendChild(recordTitle);
                recordInfo.appendChild(recordDetails);

                recordItem.appendChild(checkbox);
                recordItem.appendChild(recordInfo);

                recordsList.appendChild(recordItem);
            });
             console.log(`Mostrando ${filteredRecords.length} registros para declaración.`);
        }


        // Selecciona todos los registros visibles en la lista de declaración
        function selectAllRecords() {
            const checkboxes = document.querySelectorAll('#records-list .record-checkbox');
             if (!checkboxes.length) return;

            checkboxes.forEach(checkbox => {
                 // Solo añadir si no está ya seleccionado para evitar duplicados
                 if (!selectedRecords.includes(checkbox.value)) {
                      selectedRecords.push(checkbox.value);
                 }
                checkbox.checked = true; // Marcar visualmente
            });
             console.log("Todos los registros visibles seleccionados:", selectedRecords);
        }

        // Deselecciona todos los registros (visibles y no visibles)
        function deselectAllRecords() {
            const checkboxes = document.querySelectorAll('#records-list .record-checkbox');
             checkboxes.forEach(checkbox => {
                checkbox.checked = false; // Desmarcar visualmente
            });
            selectedRecords = []; // Vaciar la lista de seleccionados
             console.log("Todos los registros deseleccionados.");
        }


        // Genera la declaración de uso con el formato seleccionado
        function generateDeclaration() {
            if (selectedRecords.length === 0) {
                alert('Por favor, selecciona al menos un registro para incluir en la declaración.');
                return;
            }

             console.log(`Generando declaración para ${selectedRecords.length} registros.`);

            const format = document.getElementById('declaration-format')?.value || 'standard';
            const researcherName = document.getElementById('researcher-name')?.value.trim() || '';
            const institutionName = document.getElementById('institution-name')?.value.trim() || '';
            const includePrompts = document.getElementById('include-prompts')?.checked ?? true;
            const includeLinks = document.getElementById('include-links')?.checked ?? true;
            const includeDates = document.getElementById('include-dates')?.checked ?? true;
            const declarationPreview = document.getElementById('declaration-preview');

             if (!declarationPreview) {
                  console.error("Elemento de vista previa de declaración no encontrado.");
                  return;
             }


            const allRecords = loadFromStorage('chatlog_records') || [];
            const projects = loadFromStorage('chatlog_projects') || [];
            const projectsMap = {};
            projects.forEach(project => {
                projectsMap[project.id] = project.name;
            });

            // Filtrar solo los registros seleccionados
            const recordsToInclude = allRecords.filter(record => selectedRecords.includes(record.id));

            // Ordenar registros por proyecto y fecha (más antigua primero para la declaración?)
             // --> Mantengamos el orden de filtrado (proyecto alfabético, luego fecha más reciente)
             // Opcional: Ordenar por fecha ascendente aquí si se prefiere cronológico
            recordsToInclude.sort((a, b) => {
                const projectA = a.projectId || 'zzz';
                const projectB = b.projectId || 'zzz';
                if (projectA !== projectB) {
                    const nameA = projectA === 'zzz' ? 'Sin proyecto' : (projectsMap[projectA] || 'Proyecto Desconocido');
                    const nameB = projectB === 'zzz' ? 'Sin proyecto' : (projectsMap[projectB] || 'Proyecto Desconocido');
                    return nameA.localeCompare(nameB);
                }
                 // return new Date(a.dateModified || 0) - new Date(b.dateModified || 0); // Ascendente
                 return new Date(b.dateModified || 0) - new Date(a.dateModified || 0); // Descendente (como en filtro)
            });


            let declarationText = '';

            // Encabezado de la declaración
            switch (format) {
                case 'standard':
                    declarationText += '== DECLARACIÓN DE USO DE MODELOS DE LENGUAJE ==\n\n';
                    if (researcherName) declarationText += `Investigador/a: ${researcherName}\n`;
                    if (institutionName) declarationText += `Institución: ${institutionName}\n`;
                    declarationText += `Fecha de la declaración: ${new Date().toLocaleDateString()}\n\n`;
                    declarationText += `Esta declaración detalla el uso de modelos de lenguaje (LLMs) en el proceso de investigación. Se incluyen ${recordsToInclude.length} interacciones con LLMs.\n`;
                    break;

                case 'detailed':
                    declarationText += '===============================================================\n';
                    declarationText += '      DECLARACIÓN DETALLADA DE USO DE MODELOS DE LENGUAJE      \n';
                    declarationText += '===============================================================\n\n';
                    if (researcherName || institutionName) {
                        declarationText += 'INFORMACIÓN DEL INVESTIGADOR\n-----------------------------\n';
                        if (researcherName) declarationText += `Nombre: ${researcherName}\n`;
                        if (institutionName) declarationText += `Institución: ${institutionName}\n`;
                        declarationText += '\n';
                    }
                    declarationText += 'RESUMEN DE INTERACCIONES\n------------------------\n';
                    declarationText += `Total de interacciones documentadas: ${recordsToInclude.length}\n`;
                    const uniqueModels = new Set(recordsToInclude.map(r => `${r.llmName}${r.llmVersion ? ` (${r.llmVersion})` : ''}`.trim()));
                    declarationText += `Modelos utilizados (${uniqueModels.size}): ${Array.from(uniqueModels).join(', ')}\n`;
                    const uniquePurposes = new Set(recordsToInclude.map(r => r.purpose));
                    declarationText += `Finalidades (${uniquePurposes.size}): ${Array.from(uniquePurposes).join(', ')}\n\n`;
                    declarationText += `Fecha de la declaración: ${new Date().toLocaleDateString()}\n`;
                    declarationText += '===============================================================\n\n';
                    break;

                case 'minimal':
                    declarationText += 'DECLARACIÓN DE USO DE LLMs\n\n';
                    if (researcherName) declarationText += `Por: ${researcherName}\n`;
                    if (institutionName) declarationText += `${institutionName}\n`;
                    declarationText += `${new Date().toLocaleDateString()}\n\n`;
                    declarationText += `Se utilizaron modelos de lenguaje en ${recordsToInclude.length} ${recordsToInclude.length === 1 ? 'ocasión' : 'ocasiones'} durante el proceso de investigación.\n\n`;
                    break;

                case 'apa':
                    if (researcherName) {
                        declarationText += `${researcherName}`;
                        if (institutionName) declarationText += `, ${institutionName}`;
                        declarationText += '.\n\n'; // Punto al final
                    } else if (institutionName) {
                        declarationText += `${institutionName}.\n\n`;
                    }
                    declarationText += 'Declaración de Uso de Inteligencia Artificial\n\n';
                    declarationText += 'Durante la preparación de este trabajo, el autor/la autora utilizó los siguientes modelos de lenguaje de IA para asistir en diversas tareas:\n\n';
                    break;
            }

            // Cuerpo de la declaración - Agrupado por proyecto
            let currentProjectGroup = null;

            recordsToInclude.forEach((record, index) => {
                 const recordProjectId = record.projectId || 'none';
                 const recordProjectName = recordProjectId === 'none' ? 'Sin proyecto asignado' : (projectsMap[recordProjectId] || 'Proyecto Desconocido');

                 // Añadir encabezado de proyecto si cambia y no es formato APA/Minimal
                 if ( (format === 'standard' || format === 'detailed') && recordProjectId !== currentProjectGroup) {
                     currentProjectGroup = recordProjectId;
                     if (index > 0) declarationText += '\n'; // Espacio entre proyectos
                     declarationText += `--- PROYECTO: ${recordProjectName} ---\n\n`;
                 }


                // Añadir detalles del registro según el formato
                switch (format) {
                    case 'standard':
                        declarationText += `${index + 1}. ${record.interactionName || 'Interacción sin nombre'}`;
                        if (record.rating && parseInt(record.rating) > 0) declarationText += ` (Calificación: ${record.rating}/5)`;
                        declarationText += '\n';
                        declarationText += `   Modelo: ${record.llmName}${record.llmVersion ? ` (${record.llmVersion})` : ''}\n`;
                        declarationText += `   Finalidad: ${record.purpose}\n`;
                        if (includeDates) {
                            try {
                                declarationText += `   Fecha: ${new Date(record.dateModified || record.dateCreated).toLocaleDateString()}\n`;
                            } catch(e) { declarationText += '   Fecha: Inválida\n'; }
                        }
                        if (includePrompts && record.prompt) declarationText += `   Prompt: "${record.prompt}"\n`;
                        if (includeLinks && record.interactionLink) declarationText += `   Enlace: ${record.interactionLink}\n`;
                        if (record.ethicalNotes) declarationText += `   Notas éticas: ${record.ethicalNotes}\n`;
                        if (record.biasNotes) declarationText += `   Notas sesgos: ${record.biasNotes}\n`;
                        if (record.observations) declarationText += `   Observaciones: ${record.observations}\n`;
                        declarationText += '\n';
                        break;

                    case 'detailed':
                        declarationText += `INTERACCIÓN #${index + 1}: ${record.interactionName || 'Interacción sin nombre'}`;
                        if (record.rating && parseInt(record.rating) > 0) declarationText += ` (Calificación: ${record.rating}/5)`;
                        declarationText += `\n------------------------${'-'.repeat((record.interactionName || '').length)}\n`; // Subrayado dinámico
                        declarationText += `Modelo: ${record.llmName}${record.llmVersion ? ` (${record.llmVersion})` : ''}\n`;
                        declarationText += `Finalidad: ${record.purpose}\n`;
                        if (includeDates) {
                            try {
                                const dateOptions = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };
                                declarationText += `Fecha: ${new Date(record.dateModified || record.dateCreated).toLocaleString(undefined, dateOptions)}\n`;
                            } catch(e) { declarationText += 'Fecha: Inválida\n'; }
                        }
                        if (record.tags && record.tags.length > 0) declarationText += `Etiquetas: ${record.tags.join(', ')}\n`;
                        if (includeLinks && record.interactionLink) declarationText += `Enlace: ${record.interactionLink}\n`;

                        if (includePrompts && record.prompt) {
                            declarationText += '\nPROMPT UTILIZADO:\n----------------\n';
                            declarationText += `${record.prompt}\n`;
                        }

                        if (record.ethicalNotes || record.biasNotes || record.observations) {
                            declarationText += '\nNOTAS ADICIONALES:\n-----------------\n';
                            if (record.ethicalNotes) declarationText += `Consideraciones éticas: ${record.ethicalNotes}\n`;
                            if (record.biasNotes) declarationText += `Mitigación de sesgos: ${record.biasNotes}\n`;
                            if (record.observations) declarationText += `Observaciones: ${record.observations}\n`;
                        }
                        declarationText += '\n';
                        break;

                    case 'minimal':
                        declarationText += `- ${record.interactionName || 'Interacción'}: ${record.llmName}${record.llmVersion ? ` (${record.llmVersion})` : ''} - ${record.purpose}`;
                        if (record.rating && parseInt(record.rating) > 0) declarationText += ` (${record.rating}/5)`;
                        declarationText += '\n';
                        break;

                    case 'apa':
                         // APA no suele listar cada interacción, sino los modelos/tareas generales.
                         // Esta implementación es una adaptación que lista cada uso.
                        declarationText += `- Se utilizó ${record.llmName}${record.llmVersion ? ` (${record.llmVersion})` : ''} para ${record.purpose.toLowerCase()}.`;
                        if (includePrompts && record.prompt) {
                            // APA recomienda describir el prompt, no incluirlo entero.
                            // declarationText += ` Se empleó un prompt para solicitar ${record.purpose.toLowerCase()}.`; // Ejemplo descriptivo
                             declarationText += ` Prompt principal: "${record.prompt.substring(0, 80)}${record.prompt.length > 80 ? '...' : ''}"`; // O incluir inicio
                        }
                        if (record.rating && parseInt(record.rating) > 0) {
                             // APA no incluye calificaciones normalmente. Esto es extra.
                             declarationText += ` (Calificación: ${record.rating}/5).`;
                        }
                        declarationText += '\n';
                        break;
                }
            });

            // Pie de la declaración (si no es APA)
            if (format === 'standard' || format === 'detailed' || format === 'minimal') {
                declarationText += '\n===========\n';
                declarationText += 'Esta declaración fue generada automáticamente utilizando ChatLog (Demo).\n';
            } else if (format === 'apa') {
                // Pie específico APA
                declarationText += '\nEsta declaración se proporciona para transparentar el uso de herramientas de IA en la generación de este trabajo.\n';
            }

            // Mostrar en el área de vista previa
            declarationPreview.textContent = declarationText;
             declarationPreview.scrollTop = 0; // Ir al inicio de la vista previa
             console.log("Declaración generada y mostrada.");
        }


        // Copia la declaración al portapapeles
        function copyDeclarationToClipboard() {
            const declarationPreview = document.getElementById('declaration-preview');
             if (!declarationPreview) return;

            const declarationText = declarationPreview.textContent;
            const defaultText = 'La declaración se mostrará aquí después de generarla.';

            if (!declarationText || declarationText === defaultText) {
                alert('No hay declaración para copiar. Por favor, genera una declaración primero.');
                return;
            }

            // Usar la API del portapapeles (más moderna y segura)
            if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(declarationText)
                    .then(() => {
                        alert('Declaración copiada al portapapeles.');
                         console.log('Declaración copiada.');
                    })
                    .catch(err => {
                        alert('Error al copiar la declaración. Es posible que tu navegador no lo soporte o no tengas permisos.');
                        console.error('Error al copiar al portapapeles:', err);
                         // Fallback (menos fiable)
                         // copyUsingExecCommand(declarationText);
                    });
            } else {
                 // Fallback para navegadores muy antiguos (menos recomendado)
                 // copyUsingExecCommand(declarationText);
                 alert('La función de copiar al portapapeles no está disponible en tu navegador.');
                 console.warn('API Clipboard no disponible.');
            }
        }
        /* // Fallback con execCommand (evitar si es posible)
        function copyUsingExecCommand(text) {
            const textArea = document.createElement("textarea");
            textArea.value = text;
            textArea.style.position = "fixed"; // Evitar scroll
            textArea.style.opacity = "0";
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            try {
                const successful = document.execCommand('copy');
                if (successful) {
                    alert('Declaración copiada al portapapeles (método alternativo).');
                } else {
                    alert('Error al copiar la declaración (método alternativo).');
                }
            } catch (err) {
                alert('Error al copiar la declaración (método alternativo): ' + err);
            }
            document.body.removeChild(textArea);
        } */


        // Descarga la declaración como archivo de texto
        function downloadDeclaration() {
            const declarationPreview = document.getElementById('declaration-preview');
            if (!declarationPreview) return;

            const declarationText = declarationPreview.textContent;
            const defaultText = 'La declaración se mostrará aquí después de generarla.';

            if (!declarationText || declarationText === defaultText) {
                alert('No hay declaración para descargar. Por favor, genera una declaración primero.');
                return;
            }

            try {
                 const blob = new Blob([declarationText], { type: 'text/plain;charset=utf-8' }); // Especificar charset
                 const url = URL.createObjectURL(blob);
                 const a = document.createElement('a');
                 a.href = url;
                 // Nombre de archivo más descriptivo
                 const dateStr = new Date().toISOString().split('T')[0].replace(/-/g, '');
                 a.download = `ChatLog_Declaracion_${dateStr}.txt`;
                 document.body.appendChild(a); // Necesario para Firefox
                 a.click();

                 // Limpieza
                 setTimeout(() => {
                     document.body.removeChild(a);
                     URL.revokeObjectURL(url);
                      console.log(`Archivo ${a.download} descargado.`);
                 }, 100);

             } catch (error) {
                  alert('Error al intentar descargar el archivo.');
                  console.error('Error en descarga de declaración:', error);
             }

        }


        // --- ESTADÍSTICAS ---

        // Carga y muestra las estadísticas iniciales o filtradas
        function loadStatistics() {
             console.log("Cargando estadísticas...");
             // Llenar selectores de filtros (ya se hace en preload, pero asegurarse)
             // populateStatisticsFilters(); // Descomentar si preload no es suficiente

             // Cargar datos de registros (la fuente de todas las estadísticas)
             const records = loadFromStorage('chatlog_records') || [];

             if (records.length === 0) {
                 console.log("No hay registros para calcular estadísticas.");
                 showNoStatsData(); // Mostrar mensajes de "sin datos"
                 return;
             }

             // Calcular y mostrar estadísticas con los datos actuales (sin filtros aplicados inicialmente)
             applyStatisticsFilters(); // Usar esta función para aplicar filtros (o 'all' por defecto)
        }

        // Llena los selectores de filtros para estadísticas (Proyectos y Modelos)
        function populateStatisticsFilters() {
             console.log("Poblando filtros de estadísticas...");
             // Cargar proyectos (usa la función genérica)
             // loadProjects(); // -> Hecho al inicio

             // Cargar modelos únicos para el filtro
             const modelFilter = document.getElementById('stats-model-filter');
             if (!modelFilter) return; // Salir si no existe

             const records = loadFromStorage('chatlog_records') || [];
             const uniqueModels = new Set();

             records.forEach(record => {
                  // Usar solo el nombre base del modelo para el filtro
                  if (record.llmName && typeof record.llmName === 'string') {
                       uniqueModels.add(record.llmName.trim());
                  }
             });

             // Guardar selección actual
             const currentModelSelection = modelFilter.value;

             // Limpiar opciones excepto "Todos los modelos"
             const allModelOption = modelFilter.options.length > 0 ? modelFilter.options[0].cloneNode(true) : null;
             modelFilter.innerHTML = '';
             if (allModelOption) modelFilter.appendChild(allModelOption);

             // Agregar modelos únicos ordenados
             Array.from(uniqueModels).sort().forEach(model => {
                 if (model) { // Evitar añadir modelos vacíos
                      const option = document.createElement('option');
                      option.value = model;
                      option.textContent = model;
                      modelFilter.appendChild(option);
                 }
             });

              // Restaurar selección si aún existe
              if (Array.from(modelFilter.options).some(opt => opt.value === currentModelSelection)) {
                  modelFilter.value = currentModelSelection;
              }

              console.log("Filtros de estadísticas poblados.");
        }


        // Aplica los filtros seleccionados y actualiza las estadísticas
        function applyStatisticsFilters() {
             console.log("Aplicando filtros de estadísticas...");
            const dateRange = document.getElementById('stats-date-range')?.value || 'all';
            const projectFilter = document.getElementById('stats-project-filter')?.value || 'all';
            const modelFilter = document.getElementById('stats-model-filter')?.value || 'all';

            // Cargar todos los registros
            let allRecords = loadFromStorage('chatlog_records') || [];
             let filteredRecords = [...allRecords]; // Trabajar con una copia

            // 1. Filtrar por rango de fechas
             let dateFilterApplied = false;
            if (dateRange !== 'all') {
                 dateFilterApplied = true;
                const currentDate = new Date();
                let startDate;

                switch (dateRange) {
                    case 'month':
                        startDate = new Date(currentDate);
                        startDate.setMonth(currentDate.getMonth() - 1);
                        break;
                    case 'quarter':
                        startDate = new Date(currentDate);
                        startDate.setMonth(currentDate.getMonth() - 3);
                        break;
                    case 'year':
                        startDate = new Date(currentDate);
                        startDate.setFullYear(currentDate.getFullYear() - 1);
                        break;
                    default: // 'all' o inválido
                         dateFilterApplied = false;
                         break;
                }

                 if (startDate) {
                      console.log(`Filtrando por fecha desde: ${startDate.toISOString()}`);
                      filteredRecords = filteredRecords.filter(record => {
                          try {
                               // Usar fecha de creación para el filtro de período
                               const recordDate = new Date(record.dateCreated);
                               return recordDate >= startDate;
                          } catch (e) { return false; } // Ignorar registros con fecha inválida
                      });
                 } else {
                      dateFilterApplied = false;
                 }

            }
             console.log(`Después de filtro fecha (${dateRange}): ${filteredRecords.length} registros.`);

            // 2. Filtrar por proyecto
            if (projectFilter !== 'all') {
                if (projectFilter === 'none') {
                    filteredRecords = filteredRecords.filter(record => !record.projectId);
                } else {
                    filteredRecords = filteredRecords.filter(record => record.projectId === projectFilter);
                }
            }
            console.log(`Después de filtro proyecto (${projectFilter}): ${filteredRecords.length} registros.`);


            // 3. Filtrar por modelo (nombre base)
            if (modelFilter !== 'all') {
                 filteredRecords = filteredRecords.filter(record => record.llmName === modelFilter);
            }
            console.log(`Después de filtro modelo (${modelFilter}): ${filteredRecords.length} registros.`);


            // Actualizar estadísticas con los registros filtrados
            if (filteredRecords.length === 0) {
                 console.log("No hay registros que coincidan con los filtros aplicados.");
                showNoStatsData(); // Mostrar mensaje "sin datos"
            } else {
                 console.log(`Actualizando estadísticas con ${filteredRecords.length} registros filtrados.`);
                updateStatistics(filteredRecords); // Calcular y mostrar estadísticas
            }
        }

        // Restablece los filtros de estadísticas a "todos" y recarga
        function resetStatisticsFilters() {
             console.log("Restableciendo filtros de estadísticas.");
            document.getElementById('stats-date-range').value = 'all';
            document.getElementById('stats-project-filter').value = 'all';
            document.getElementById('stats-model-filter').value = 'all';

            // Volver a cargar las estadísticas con todos los registros
             applyStatisticsFilters(); // Re-aplicar filtros (que ahora son 'all')
        }

        // Muestra mensajes de "No hay datos" en todas las secciones de estadísticas
        function showNoStatsData() {
            // Actualizar resumen general con ceros
            document.getElementById('total-interactions').textContent = '0';
            document.getElementById('total-models').textContent = '0';
            document.getElementById('total-projects').textContent = '0';
            document.getElementById('total-purposes').textContent = '0';

            // Limpiar tablas y mostrar mensaje
            const tableIds = ['models-table', 'purposes-table', 'projects-table-stats']; // ID corregido
            tableIds.forEach(tableId => {
                const tableBody = document.querySelector(`#${tableId} tbody`);
                if (tableBody) {
                     tableBody.innerHTML = `<tr><td colspan="4" class="no-data-message">No hay datos disponibles para los filtros seleccionados</td></tr>`;
                }
            });

            // Limpiar cronología
             const timelineContainer = document.getElementById('timeline-container');
             if (timelineContainer) {
                 timelineContainer.innerHTML = '<div class="no-data-message">No hay datos de actividad disponibles</div>';
             }

            // Limpiar nube de etiquetas
            const tagsCloud = document.getElementById('tags-cloud');
            if (tagsCloud) {
                 tagsCloud.innerHTML = '<div class="no-data-message">No hay etiquetas disponibles</div>';
            }

        }

        // Actualiza todas las visualizaciones de estadísticas con los registros proporcionados
        function updateStatistics(records) {
             if (!Array.isArray(records) || records.length === 0) {
                 showNoStatsData();
                 return;
             }

             console.log(`Actualizando visualizaciones de estadísticas con ${records.length} registros.`);
            // Actualizar resumen general
            updateStatsSummary(records);

            // Actualizar tablas con barras de progreso
            updateStatsTable(records, 'llmName', 'models-table', 5); // Top 5 modelos
            updateStatsTable(records, 'purpose', 'purposes-table', 5); // Top 5 finalidades
             updateProjectsStatsTable(records, 5); // Función específica para proyectos

            // Actualizar cronología
            updateTimeline(records);

            // Actualizar nube de etiquetas
            updateTagsCloud(records);
        }

        // Actualiza el resumen general (tarjetas superiores)
        function updateStatsSummary(records) {
            document.getElementById('total-interactions').textContent = records.length;
            document.getElementById('total-models').textContent = new Set(records.map(r => r.llmName)).size;
            document.getElementById('total-projects').textContent = new Set(records.filter(r => r.projectId).map(r => r.projectId)).size;
            document.getElementById('total-purposes').textContent = new Set(records.map(r => r.purpose)).size;
        }

         // Función genérica para actualizar tablas de estadísticas (Modelos, Finalidades)
         function updateStatsTable(records, property, tableId, topN = null) {
             const tableBody = document.querySelector(`#${tableId} tbody`);
             if (!tableBody) return;

             // Contar ocurrencias de cada valor de la propiedad
             const counts = {};
             records.forEach(record => {
                 const value = record[property] || 'Desconocido'; // Valor por defecto
                 if (!counts[value]) counts[value] = 0;
                 counts[value]++;
             });

             // Ordenar por frecuencia descendente
             let sortedItems = Object.entries(counts).sort(([, countA], [, countB]) => countB - countA);

             // Limitar a los N primeros si se especifica
             if (topN !== null && !isNaN(topN)) {
                  sortedItems = sortedItems.slice(0, topN);
             }


             tableBody.innerHTML = ''; // Limpiar tabla

             if (sortedItems.length === 0) {
                  tableBody.innerHTML = `<tr><td colspan="4" class="no-data-message">No hay datos</td></tr>`;
                  return;
             }

             // Colores para las barras (más colores)
             const colors = [
                 'var(--chart-color-1)', 'var(--chart-color-2)', 'var(--chart-color-3)',
                 'var(--chart-color-4)', 'var(--chart-color-5)', 'var(--chart-color-6)',
                 'var(--chart-color-7)', 'var(--chart-color-8)', 'var(--chart-color-9)',
                 'var(--chart-color-10)'
             ];
             const totalRecords = records.length; // Total para calcular porcentaje

             sortedItems.forEach(([item, count], index) => {
                 const percentage = totalRecords > 0 ? ((count / totalRecords) * 100) : 0;
                 const colorIndex = index % colors.length;

                 const row = document.createElement('tr');

                 const itemCell = document.createElement('td');
                 itemCell.textContent = item;

                 const countCell = document.createElement('td');
                 countCell.textContent = count;

                 const percentCell = document.createElement('td');
                 percentCell.textContent = `${percentage.toFixed(1)}%`; // Un decimal

                 const barCell = document.createElement('td');
                 const progressBar = document.createElement('div');
                 progressBar.className = 'progress-bar';
                 progressBar.setAttribute('title', `${item}: ${count} (${percentage.toFixed(1)}%)`); // Tooltip

                 const progressFill = document.createElement('div');
                 progressFill.className = 'progress-fill';
                 // Usar requestAnimationFrame para animar el ancho suavemente
                 progressFill.style.width = '0%'; // Empezar en 0
                 progressFill.style.backgroundColor = colors[colorIndex];
                 // progressFill.textContent = `${percentage.toFixed(0)}%`; // Mostrar porcentaje dentro (opcional)


                 requestAnimationFrame(() => {
                      // Pequeño delay antes de animar para asegurar que se renderice en 0
                      setTimeout(() => {
                           progressFill.style.width = `${percentage}%`;
                      }, 50);
                 });


                 progressBar.appendChild(progressFill);
                 barCell.appendChild(progressBar);

                 row.appendChild(itemCell);
                 row.appendChild(countCell);
                 row.appendChild(percentCell);
                 row.appendChild(barCell);

                 tableBody.appendChild(row);
             });
         }


        // Actualiza la tabla de estadísticas de proyectos (función específica por nombres)
        function updateProjectsStatsTable(records, topN = null) {
             const tableId = 'projects-table-stats'; // ID específico para la tabla de stats
             const tableBody = document.querySelector(`#${tableId} tbody`);
             if (!tableBody) return;

             // Cargar nombres de proyectos
             const projects = loadFromStorage('chatlog_projects') || [];
             const projectsMap = {};
             projects.forEach(project => {
                 projectsMap[project.id] = project.name;
             });

             // Contar ocurrencias por proyecto
             const projectCounts = {};
             records.forEach(record => {
                 const projectId = record.projectId || 'none'; // 'none' para sin proyecto
                 if (!projectCounts[projectId]) projectCounts[projectId] = 0;
                 projectCounts[projectId]++;
             });

             // Ordenar por frecuencia descendente
             let sortedProjects = Object.entries(projectCounts).sort(([, countA], [, countB]) => countB - countA);

             // Limitar a los N primeros si se especifica
             if (topN !== null && !isNaN(topN)) {
                  sortedProjects = sortedProjects.slice(0, topN);
             }

             tableBody.innerHTML = ''; // Limpiar tabla

             if (sortedProjects.length === 0) {
                 tableBody.innerHTML = `<tr><td colspan="4" class="no-data-message">No hay datos</td></tr>`;
                 return;
             }

             // Colores y total
             const colors = [
                 'var(--chart-color-3)', 'var(--chart-color-5)', 'var(--chart-color-1)',
                 'var(--chart-color-6)', 'var(--chart-color-4)', 'var(--chart-color-2)',
                 'var(--chart-color-7)', 'var(--chart-color-9)', 'var(--chart-color-8)',
                 'var(--chart-color-10)'
             ];
             const totalRecords = records.length;

             sortedProjects.forEach(([projectId, count], index) => {
                 const percentage = totalRecords > 0 ? ((count / totalRecords) * 100) : 0;
                 const colorIndex = index % colors.length;
                 const projectName = projectId === 'none' ? 'Sin proyecto' : (projectsMap[projectId] || `ID: ${projectId.substring(0,6)}...`);


                 const row = document.createElement('tr');

                 const projectCell = document.createElement('td');
                 projectCell.textContent = projectName;

                 const countCell = document.createElement('td');
                 countCell.textContent = count;

                 const percentCell = document.createElement('td');
                 percentCell.textContent = `${percentage.toFixed(1)}%`;

                 const barCell = document.createElement('td');
                 const progressBar = document.createElement('div');
                 progressBar.className = 'progress-bar';
                  progressBar.setAttribute('title', `${projectName}: ${count} (${percentage.toFixed(1)}%)`);

                 const progressFill = document.createElement('div');
                 progressFill.className = 'progress-fill';
                 progressFill.style.width = '0%';
                 progressFill.style.backgroundColor = colors[colorIndex];
                 // progressFill.textContent = `${percentage.toFixed(0)}%`;

                  requestAnimationFrame(() => {
                       setTimeout(() => {
                            progressFill.style.width = `${percentage}%`;
                       }, 50);
                  });

                 progressBar.appendChild(progressFill);
                 barCell.appendChild(progressBar);

                 row.appendChild(projectCell);
                 row.appendChild(countCell);
                 row.appendChild(percentCell);
                 row.appendChild(barCell);

                 tableBody.appendChild(row);
             });
        }


        // Actualiza la visualización de cronología (actividad por día)
        function updateTimeline(records) {
             const timelineContainer = document.getElementById('timeline-container');
             if (!timelineContainer) return;

            // Agrupar registros por fecha (YYYY-MM-DD usando fecha de creación)
            const recordsByDate = {};
            records.forEach(record => {
                 try {
                     const date = new Date(record.dateCreated);
                     // Ignorar fechas inválidas
                     if (isNaN(date.getTime())) return;
                     const dateKey = date.toISOString().split('T')[0];
                     if (!recordsByDate[dateKey]) recordsByDate[dateKey] = 0;
                     recordsByDate[dateKey]++;
                 } catch (e) { /* Ignorar registro con fecha inválida */ }
            });

            // Ordenar fechas cronológicamente (ascendente)
            const sortedDates = Object.keys(recordsByDate).sort();

            timelineContainer.innerHTML = ''; // Limpiar

            if (sortedDates.length === 0) {
                timelineContainer.innerHTML = '<div class="no-data-message">No hay actividad registrada en este período</div>';
                return;
            }

            // Encontrar el máximo para escalar las barras
            const counts = Object.values(recordsByDate);
            const maxCount = counts.length > 0 ? Math.max(...counts) : 1; // Evitar división por cero

            // Crear la cronología
            sortedDates.forEach(dateKey => {
                const count = recordsByDate[dateKey];
                // Escalar logarítmicamente para mejor visualización si hay mucha variación (opcional)
                 // const percentage = maxCount > 1 ? (Math.log(count + 1) / Math.log(maxCount + 1)) * 100 : 100;
                 // Escala lineal simple:
                 const percentage = maxCount > 0 ? (count / maxCount) * 100 : 0;


                const timelineItem = document.createElement('div');
                timelineItem.className = 'timeline-item';

                // Formatear fecha para mostrar
                let formattedDate = dateKey; // Por defecto
                 try {
                     const [year, month, day] = dateKey.split('-');
                     const date = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
                     formattedDate = date.toLocaleDateString(undefined, { month: 'short', day: 'numeric', year: 'numeric' });
                 } catch(e) {}


                const dateElement = document.createElement('div');
                dateElement.className = 'timeline-date';
                dateElement.textContent = formattedDate;

                const barContainer = document.createElement('div');
                barContainer.className = 'timeline-bar-container';

                const bar = document.createElement('div');
                bar.className = 'timeline-bar';
                 bar.setAttribute('title', `${formattedDate}: ${count} ${count === 1 ? 'interacción' : 'interacciones'}`);
                 bar.style.width = '0%'; // Empezar en 0 para animación
                 bar.textContent = count; // Mostrar el número dentro

                 requestAnimationFrame(() => {
                       setTimeout(() => {
                           // Animar la barra a su ancho correcto
                           bar.style.width = `${Math.max(percentage, 1)}%`; // Mínimo 1% para visibilidad
                       }, 50);
                  });


                barContainer.appendChild(bar);
                timelineItem.appendChild(dateElement);
                timelineItem.appendChild(barContainer);

                timelineContainer.appendChild(timelineItem);
            });
             console.log(`Cronología actualizada con ${sortedDates.length} días de actividad.`);
        }


        // Actualiza la nube de etiquetas
        function updateTagsCloud(records) {
             const tagsCloudContainer = document.getElementById('tags-cloud');
             if (!tagsCloudContainer) return;

            // Contar ocurrencias de cada etiqueta
            const tagCounts = {};
            records.forEach(record => {
                if (record.tags && Array.isArray(record.tags)) {
                    record.tags.forEach(tag => {
                         if (tag && typeof tag === 'string') { // Validar etiqueta
                              const cleanTag = tag.trim();
                              if (cleanTag) { // No contar etiquetas vacías
                                   if (!tagCounts[cleanTag]) tagCounts[cleanTag] = 0;
                                   tagCounts[cleanTag]++;
                              }
                         }
                    });
                }
            });

            // Ordenar por frecuencia descendente
            const sortedTags = Object.entries(tagCounts).sort(([, countA], [, countB]) => countB - countA);

            // Limitar a las N etiquetas más frecuentes (ej. 30)
            const topTags = sortedTags.slice(0, 30);

            tagsCloudContainer.innerHTML = ''; // Limpiar

            if (topTags.length === 0) {
                tagsCloudContainer.innerHTML = '<div class="no-data-message">No hay etiquetas para mostrar</div>';
                return;
            }

            // Encontrar el rango para el tamaño de la fuente (mínimo y máximo)
             const counts = topTags.map(([, count]) => count);
             const minCount = counts.length > 0 ? Math.min(...counts) : 1;
             const maxCount = counts.length > 0 ? Math.max(...counts) : 1;
             const baseFontSize = 13; // Tamaño mínimo en px
             const maxFontSizeAddition = 15; // Cuánto puede crecer la fuente (total max = base + addition)

            // Función para calcular el tamaño de fuente (lineal o logarítmica)
            function calculateFontSize(count) {
                if (maxCount === minCount) return baseFontSize; // Si todas tienen la misma frecuencia
                // Escala lineal:
                // const scale = (count - minCount) / (maxCount - minCount);
                // Escala logarítmica (mejor para grandes diferencias):
                const scale = Math.log(count - minCount + 1) / Math.log(maxCount - minCount + 1);
                return baseFontSize + scale * maxFontSizeAddition;
            }

            // Colores para las etiquetas (variación de primario)
            const colors = [
                'var(--primary-color)', '#4a00b0', '#6247aa', '#7a5de8', '#5900d9'
            ];

            topTags.forEach(([tag, count], index) => {
                const fontSize = calculateFontSize(count);
                const colorIndex = Math.floor(Math.random() * colors.length); // Color aleatorio de la paleta

                const tagElement = document.createElement('div');
                tagElement.className = 'tag-cloud-item';
                tagElement.textContent = tag;
                tagElement.style.fontSize = `${fontSize.toFixed(1)}px`;
                tagElement.style.backgroundColor = colors[colorIndex];
                tagElement.setAttribute('title', `${tag}: ${count} ${count === 1 ? 'uso' : 'usos'}`);

                tagsCloudContainer.appendChild(tagElement);
            });
             console.log(`Nube de etiquetas actualizada con ${topTags.length} etiquetas.`);
        }


        // --- HERRAMIENTAS: EXPORTACIÓN / IMPORTACIÓN ---

        // Exportar todos los datos (proyectos y registros) como JSON
        function exportAllData() {
            console.log("Exportando todos los datos...");
             try {
                 const data = {
                    records: loadFromStorage('chatlog_records') || [],
                    projects: loadFromStorage('chatlog_projects') || [],
                    metadata: {
                        app: 'ChatLog',
                        version: '1.0', // Podrías obtener esto del manifest si fuera una extensión real
                        exportDate: new Date().toISOString(),
                        type: 'full_backup' // Indicar que es un backup completo
                    }
                 };

                 if (data.records.length === 0 && data.projects.length === 0) {
                      alert("No hay datos para exportar.");
                      return;
                 }

                 downloadJSON(data, 'ChatLog_Backup_Completo');
                  console.log("Exportación JSON iniciada.");
             } catch (error) {
                  alert("Error al preparar los datos para la exportación.");
                  console.error("Error en exportAllData:", error);
             }

        }

        // Exportar solo los registros como archivo CSV
        function exportCSV() {
            console.log("Exportando registros a CSV...");
             try {
                 const records = loadFromStorage('chatlog_records') || [];

                 if (records.length === 0) {
                    alert('No hay registros para exportar a CSV.');
                    return;
                 }

                 // Mapear proyectos por ID para incluir nombres
                 const projects = loadFromStorage('chatlog_projects') || [];
                 const projectsMap = {};
                 projects.forEach(project => {
                    projectsMap[project.id] = project.name;
                 });

                 // Definir encabezados CSV (más explícitos)
                 const headers = [
                    'ID_Registro', 'Nombre_Interaccion', 'Finalidad', 'Nombre_LLM', 'Version_LLM',
                    'Prompt', 'Enlace_Interaccion', 'Etiquetas (Separadas por ;)',
                    'Notas_Eticas', 'Notas_Mitigacion_Sesgos', 'Otras_Observaciones',
                    'Calificacion (0-5)', 'ID_Proyecto', 'Nombre_Proyecto',
                    'Fecha_Creacion', 'Fecha_Modificacion'
                 ];

                 // Crear filas de datos CSV
                 let csvContent = headers.map(escapeCsvValue).join(',') + '\n'; // Escapar también encabezados

                 records.forEach(record => {
                    const projectName = record.projectId ? (projectsMap[record.projectId] || 'ID Desconocido') : '';
                    const tags = Array.isArray(record.tags) ? record.tags.join('; ') : ''; // Usar ; como separador multi-valor

                     // Formatear fechas a ISO para consistencia
                     let dateCreatedISO = '';
                     try { dateCreatedISO = new Date(record.dateCreated).toISOString(); } catch(e){}
                     let dateModifiedISO = '';
                     try { dateModifiedISO = new Date(record.dateModified).toISOString(); } catch(e){}


                    const row = [
                        record.id, record.interactionName, record.purpose, record.llmName, record.llmVersion || '',
                        record.prompt, record.interactionLink || '', tags,
                        record.ethicalNotes || '', record.biasNotes || '', record.observations || '',
                        record.rating || '0', record.projectId || '', projectName,
                        dateCreatedISO, dateModifiedISO
                    ];

                    csvContent += row.map(escapeCsvValue).join(',') + '\n';
                 });

                 // Descargar el archivo CSV
                 const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                 const url = URL.createObjectURL(blob);
                 const a = document.createElement('a');
                 a.href = url;
                 const dateStr = new Date().toISOString().split('T')[0].replace(/-/g, '');
                 a.download = `ChatLog_Registros_${dateStr}.csv`;
                 document.body.appendChild(a);
                 a.click();

                 setTimeout(() => {
                     document.body.removeChild(a);
                     URL.revokeObjectURL(url);
                      console.log("Exportación CSV iniciada.");
                 }, 100);

             } catch (error) {
                  alert("Error al preparar los datos para la exportación CSV.");
                  console.error("Error en exportCSV:", error);
             }
        }


        // Función auxiliar para escapar valores en CSV (maneja comillas y comas)
        function escapeCsvValue(value) {
            const stringValue = (value === null || value === undefined) ? '' : String(value);
            // Si contiene comillas, comas, saltos de línea o punto y coma, encerrar y duplicar comillas
            if (stringValue.includes('"') || stringValue.includes(',') || stringValue.includes('\n') || stringValue.includes(';')) {
                return `"${stringValue.replace(/"/g, '""')}"`;
            }
            return stringValue; // Devolver sin comillas si no es necesario
        }

        // Función auxiliar para descargar datos como JSON
        function downloadJSON(data, baseFilename) {
            try {
                 const jsonString = JSON.stringify(data, null, 2); // Indentado para legibilidad
                 const blob = new Blob([jsonString], { type: 'application/json;charset=utf-8' });
                 const url = URL.createObjectURL(blob);

                 const a = document.createElement('a');
                 a.href = url;
                 const dateStr = new Date().toISOString().split('T')[0].replace(/-/g, '');
                 a.download = `${baseFilename}_${dateStr}.json`;
                 document.body.appendChild(a);
                 a.click();

                 setTimeout(() => {
                     document.body.removeChild(a);
                     URL.revokeObjectURL(url);
                 }, 100);
            } catch (error) {
                 alert("Error al generar el archivo JSON para descargar.");
                 console.error("Error en downloadJSON:", error);
            }
        }


        // Importar datos desde archivo JSON
        function importData() {
            const fileInput = document.getElementById('import-file');
             if (!fileInput || !fileInput.files || fileInput.files.length === 0) {
                alert('Por favor, selecciona un archivo JSON para importar.');
                return;
            }
            const file = fileInput.files[0];

            // Confirmar la importación
             const replaceData = confirm('¿Deseas REEMPLAZAR todos tus datos actuales (proyectos y registros) con los del archivo? \n\nPresiona "Cancelar" para intentar FUSIONAR los datos (añadir nuevos, no sobrescribir existentes).');


            const reader = new FileReader();

            reader.onload = function(e) {
                try {
                    const importedData = JSON.parse(e.target.result);

                    // Validar estructura básica del archivo
                    if (!importedData || typeof importedData !== 'object' || !importedData.metadata || importedData.metadata.app !== 'ChatLog') {
                        throw new Error('El archivo no parece ser un respaldo válido de ChatLog (falta metadata o formato incorrecto).');
                    }
                     console.log(`Archivo JSON importado. Versión: ${importedData.metadata.version}, Tipo: ${importedData.metadata.type}`);

                    let importedRecordsCount = 0;
                    let importedProjectsCount = 0;

                     // --- Importar Proyectos ---
                     const existingProjects = loadFromStorage('chatlog_projects') || [];
                     let finalProjects = [];

                     if (importedData.projects && Array.isArray(importedData.projects)) {
                          if (replaceData) {
                               // Reemplazar completamente
                               finalProjects = importedData.projects;
                               importedProjectsCount = finalProjects.length;
                               console.log(`Reemplazando ${existingProjects.length} proyectos existentes con ${importedProjectsCount} importados.`);
                          } else {
                               // Fusionar: Añadir solo los que no existen por ID
                               finalProjects = [...existingProjects];
                               const existingProjectIds = new Set(existingProjects.map(p => p.id));
                               const newProjects = importedData.projects.filter(p => !existingProjectIds.has(p.id));
                               finalProjects.push(...newProjects);
                               importedProjectsCount = newProjects.length;
                               console.log(`Fusionando proyectos: ${existingProjects.length} existentes + ${importedProjectsCount} nuevos importados = ${finalProjects.length} total.`);
                          }
                          // Guardar proyectos (si hay cambios o se reemplazó)
                           if (importedProjectsCount > 0 || replaceData) {
                               if (!saveToStorage('chatlog_projects', finalProjects)) {
                                   throw new Error("Error al guardar los proyectos importados.");
                               }
                           }

                     } else {
                          console.log("No se encontraron proyectos en el archivo importado.");
                          if (replaceData) {
                               // Si se reemplaza y no hay proyectos, borrar los existentes
                               saveToStorage('chatlog_projects', []);
                               console.log("Proyectos existentes eliminados (opción reemplazar).");
                          } else {
                               finalProjects = existingProjects; // Mantener los existentes si se fusiona
                          }
                     }


                     // --- Importar Registros ---
                     const existingRecords = loadFromStorage('chatlog_records') || [];
                     let finalRecords = [];

                     if (importedData.records && Array.isArray(importedData.records)) {
                          if (replaceData) {
                               // Reemplazar completamente
                               finalRecords = importedData.records;
                               importedRecordsCount = finalRecords.length;
                               console.log(`Reemplazando ${existingRecords.length} registros existentes con ${importedRecordsCount} importados.`);
                          } else {
                               // Fusionar: Añadir solo los que no existen por ID
                               finalRecords = [...existingRecords];
                               const existingRecordIds = new Set(existingRecords.map(r => r.id));
                               const newRecords = importedData.records.filter(r => !existingRecordIds.has(r.id));
                               finalRecords.push(...newRecords);
                               importedRecordsCount = newRecords.length;
                               console.log(`Fusionando registros: ${existingRecords.length} existentes + ${importedRecordsCount} nuevos importados = ${finalRecords.length} total.`);
                          }
                           // Guardar registros (si hay cambios o se reemplazó)
                            if (importedRecordsCount > 0 || replaceData) {
                               if (!saveToStorage('chatlog_records', finalRecords)) {
                                   throw new Error("Error al guardar los registros importados.");
                               }
                           }

                     } else {
                          console.log("No se encontraron registros en el archivo importado.");
                          if (replaceData) {
                               // Si se reemplaza y no hay registros, borrar los existentes
                               saveToStorage('chatlog_records', []);
                               console.log("Registros existentes eliminados (opción reemplazar).");
                          } else {
                               finalRecords = existingRecords; // Mantener los existentes si se fusiona
                          }
                     }


                    // Actualizar toda la interfaz
                     console.log("Actualizando interfaz después de la importación JSON...");
                    loadProjects();
                    loadQuickAccessList();
                    // Forzar recarga en pestañas no visibles también
                     preloadTabData(); // Recarga filtros y estructuras
                     // Recargar datos específicos si las pestañas están activas
                     if (document.getElementById('tools')?.classList.contains('active')) loadRecordsForManagement();
                     if (document.getElementById('stats')?.classList.contains('active')) loadStatistics();
                     if (document.getElementById('declaration')?.classList.contains('active')) loadRecordsForDeclaration();
                     updateAllTags();
                     updateStorageUsage();


                    // Reiniciar el campo de archivo y botón
                    fileInput.value = '';
                     document.getElementById('import-data-btn').disabled = true;

                    alert(`Importación JSON completada.\n${replaceData ? 'Datos reemplazados.' : 'Datos fusionados.'}\nProyectos añadidos/reemplazados: ${importedProjectsCount}\nRegistros añadidos/reemplazados: ${importedRecordsCount}`);
                } catch (error) {
                    console.error('Error al importar datos JSON:', error);
                    alert('Error al importar datos: ' + error.message);
                     fileInput.value = ''; // Limpiar por si acaso
                     document.getElementById('import-data-btn').disabled = true;
                }
            };

            reader.onerror = function() {
                alert('Error al leer el archivo seleccionado.');
                 fileInput.value = '';
                 document.getElementById('import-data-btn').disabled = true;
            };

            reader.readAsText(file);
        }

        // Muestra vista previa de las primeras filas del CSV seleccionado
        function previewCSV() {
            const fileInput = document.getElementById('csv-file');
            const previewContainer = document.getElementById('csv-preview-container');
            const previewElement = document.getElementById('csv-preview');

            if (!previewContainer || !previewElement) return;

            if (!fileInput || !fileInput.files || fileInput.files.length === 0) {
                previewContainer.style.display = 'none';
                return;
            }
            const file = fileInput.files[0];

             // Validar tipo MIME básico (opcional pero útil)
             if (!file.type.match('text/csv') && !file.name.toLowerCase().endsWith('.csv')) {
                 alert('Por favor, selecciona un archivo con formato CSV.');
                 previewContainer.style.display = 'none';
                 fileInput.value = ''; // Resetear input
                 document.getElementById('import-csv-btn').disabled = true;
                 return;
             }

            const reader = new FileReader();

            reader.onload = function(e) {
                try {
                    const csvContent = e.target.result;
                     // Usar PapaParse si estuviera disponible sería más robusto
                     // const parsed = Papa.parse(csvContent, { header: true, skipEmptyLines: true, preview: 5 });
                     // const records = parsed.data;
                     // const headers = parsed.meta.fields;

                     // Usar el parser simple si no hay PapaParse
                    const records = parseCSVSimple(csvContent, 5); // Parsear solo 5 filas para preview

                    if (records.length === 0 || !records[0]) {
                        previewElement.innerHTML = '<p class="no-data-message">El archivo CSV está vacío o no se pudieron leer encabezados.</p>';
                        previewContainer.style.display = 'block';
                        document.getElementById('import-csv-btn').disabled = true; // Deshabilitar importación si no hay preview
                        return;
                    }

                    // Obtener encabezados (claves del primer objeto)
                    const headers = Object.keys(records[0]);

                    // Generar tabla HTML para vista previa
                    let tableHtml = '<table>';
                    tableHtml += '<thead><tr>';
                    headers.forEach(header => {
                        tableHtml += `<th>${escapeHtml(header)}</th>`; // Escapar HTML en encabezados
                    });
                    tableHtml += '</tr></thead>';

                    // Datos (mostrar las filas parseadas, máximo 5)
                    tableHtml += '<tbody>';
                    records.forEach(row => {
                        tableHtml += '<tr>';
                        headers.forEach(header => {
                            tableHtml += `<td>${escapeHtml(row[header] || '')}</td>`; // Escapar HTML en datos
                        });
                        tableHtml += '</tr>';
                    });
                    tableHtml += '</tbody></table>';

                    // Leer más líneas para obtener el total real (aproximado)
                     const totalLines = (csvContent.match(/\r\n|\n/g) || []).length;
                     const totalRecordsApproximation = Math.max(0, totalLines -1); // Restar encabezado

                    if (totalRecordsApproximation > records.length) {
                         tableHtml += `<p class="text-muted" style="font-size: 0.8em; margin-top: 5px;">(Mostrando ${records.length} de ~${totalRecordsApproximation} registros)</p>`;
                    }


                    previewElement.innerHTML = tableHtml;
                    previewContainer.style.display = 'block';
                     document.getElementById('import-csv-btn').disabled = false; // Habilitar importación

                } catch (error) {
                    console.error('Error al mostrar vista previa del CSV:', error);
                    previewElement.innerHTML = `<p class="no-data-message" style="color: var(--danger-color);">Error al procesar el archivo CSV: ${error.message}</p>`;
                    previewContainer.style.display = 'block';
                     document.getElementById('import-csv-btn').disabled = true;
                }
            };

            reader.onerror = function() {
                previewElement.innerHTML = '<p class="no-data-message" style="color: var(--danger-color);">Error al leer el archivo.</p>';
                previewContainer.style.display = 'block';
                 document.getElementById('import-csv-btn').disabled = true;
            };

            reader.readAsText(file); // Leer como texto
        }


        // Parsear contenido CSV a array de objetos (versión simple)
        // Nota: Esta versión es básica y puede fallar con CSVs complejos (comillas dentro de campos, etc.)
        // Considerar usar una librería como PapaParse.js para robustez.
        function parseCSVSimple(csvContent, maxRows = Infinity) {
             if (!csvContent) return [];

             // Dividir en líneas, manejando \r\n y \n
             const lines = csvContent.trim().split(/\r\n|\n/);

             // No hay datos o solo encabezado vacío
             if (lines.length <= 1) return [];

             // Obtener encabezados (primera línea), limpiar espacios
             const headers = lines[0].split(',').map(header => header.trim());

             // Si no hay encabezados válidos
             if (headers.length === 0 || headers.every(h => !h)) return [];


             const records = [];
             // Procesar las líneas de datos (empezar desde la segunda línea, índice 1)
             for (let i = 1; i < lines.length && records.length < maxRows; i++) {
                 const line = lines[i].trim();
                 if (!line) continue; // Saltar líneas vacías

                 // Parseo simple por comas (puede fallar con comas dentro de comillas)
                 // Intento básico de manejar comillas: no dividir si está dentro de comillas
                 const values = [];
                 let currentVal = '';
                 let inQuotes = false;
                 for (let char of line) {
                      if (char === '"') {
                          inQuotes = !inQuotes;
                      } else if (char === ',' && !inQuotes) {
                          values.push(currentVal.trim());
                          currentVal = '';
                      } else {
                          currentVal += char;
                      }
                 }
                 values.push(currentVal.trim()); // Añadir el último valor


                 // Si el número de valores no coincide con encabezados, puede haber error de parseo
                  if (values.length !== headers.length) {
                       console.warn(`Línea ${i+1}: Número de valores (${values.length}) no coincide con encabezados (${headers.length}). Línea: "${line}"`);
                       // Intentar re-parsear solo por comas si falla el manejo de comillas
                       const simpleValues = line.split(',');
                       if (simpleValues.length === headers.length) {
                            values.length = 0; // Limpiar array anterior
                            values.push(...simpleValues.map(v => v.trim()));
                            console.log(`Línea ${i+1}: Re-parseada simple.`);
                       } else {
                           // Omitir la línea o rellenar con vacíos? Por ahora omitir.
                           // continue;
                           // Rellenar:
                           while(values.length < headers.length) values.push('');
                           values.length = headers.length; // Truncar si hay extras
                       }
                  }

                 // Crear objeto con los valores
                 const record = {};
                 headers.forEach((header, index) => {
                      // Limpiar comillas dobles al inicio/fin si quedaron
                      let value = values[index] || ''; // Valor por defecto vacío
                      if (value.startsWith('"') && value.endsWith('"')) {
                          value = value.substring(1, value.length - 1);
                      }
                      // Reemplazar comillas dobles escapadas ("") por una sola comilla (")
                      record[header] = value.replace(/""/g, '"');
                 });
                 records.push(record);
             }

             return records;
        }

        // Importar registros desde archivo CSV
        function importCSV() {
            const fileInput = document.getElementById('csv-file');
             if (!fileInput || !fileInput.files || fileInput.files.length === 0) {
                alert('Por favor, selecciona un archivo CSV para importar.');
                return;
            }
            const file = fileInput.files[0];

            // Confirmar la importación (Siempre fusiona, no reemplaza)
            if (!confirm('Esta acción AÑADIRÁ los registros del archivo CSV a tus datos existentes. Los registros con el mismo ID (si existe columna ID) NO serán sobrescritos.\n\n¿Deseas continuar?')) {
                return;
            }

            const reader = new FileReader();

            reader.onload = function(e) {
                try {
                    const csvContent = e.target.result;
                    // Parsear TODO el contenido ahora
                    const csvRecords = parseCSVSimple(csvContent); // Parsear todas las filas

                    if (csvRecords.length === 0) {
                        alert('El archivo CSV está vacío o no se pudieron leer datos.');
                        return;
                    }
                     console.log(`CSV parseado. ${csvRecords.length} registros encontrados.`);

                     // Mapeo inteligente de columnas (buscar nombres comunes)
                     const headers = Object.keys(csvRecords[0]);
                     const fieldMapping = mapCsvHeaders(headers);

                     // Validar que se encontraron los campos mínimos requeridos
                     const requiredMappedFields = ['name', 'purpose', 'model']; // Mapeados internamente
                     const missingFields = requiredMappedFields.filter(field => !fieldMapping[field]);

                     if (missingFields.length > 0) {
                          const missingOriginalNames = missingFields.map(f => {
                               // Intentar adivinar qué nombres buscaba
                               if (f === 'name') return "'Nombre Interacción' o similar";
                               if (f === 'purpose') return "'Finalidad' o similar";
                               if (f === 'model') return "'Nombre LLM' o similar";
                               return f; // Nombre interno si no hay mapeo claro
                          });
                          alert(`Error: El archivo CSV no parece contener las columnas requeridas:\n- ${missingOriginalNames.join('\n- ')}\n\nAsegúrate de que el CSV tenga encabezados claros.`);
                          return;
                     }


                    // Convertir los registros CSV al formato de ChatLog
                    const existingRecords = loadFromStorage('chatlog_records') || [];
                     const existingRecordIds = new Set(existingRecords.map(r => r.id));
                     const newRecordsToAdd = [];
                     let skippedCount = 0;


                    csvRecords.forEach((csvRecord, index) => {
                         // Intentar obtener ID del CSV si existe columna mapeada
                         const csvId = fieldMapping.id ? csvRecord[fieldMapping.id]?.trim() : null;

                         // Si el ID del CSV ya existe en los registros actuales, saltar (modo fusión)
                         if (csvId && existingRecordIds.has(csvId)) {
                              skippedCount++;
                              return; // Saltar este registro
                         }

                         // Crear registro en formato ChatLog
                         const newRecord = {
                             // Usar ID del CSV si existe y es único, si no, generar uno nuevo
                             id: (csvId && !existingRecordIds.has(csvId)) ? csvId : Date.now().toString() + Math.random().toString(36).substring(2, 8),
                             interactionName: csvRecord[fieldMapping.name]?.trim() || `Registro CSV ${index + 1}`,
                             purpose: csvRecord[fieldMapping.purpose]?.trim() || 'Sin especificar',
                             llmName: csvRecord[fieldMapping.model]?.trim() || 'Sin especificar',
                             llmVersion: fieldMapping.version ? csvRecord[fieldMapping.version]?.trim() : '',
                             prompt: fieldMapping.prompt ? csvRecord[fieldMapping.prompt]?.trim() : '',
                             interactionLink: fieldMapping.link ? csvRecord[fieldMapping.link]?.trim() : '',
                             // Parsear etiquetas separadas por ; o ,
                             tags: fieldMapping.tags ? (csvRecord[fieldMapping.tags]?.split(/[;,]/) || []).map(tag => tag.trim()).filter(Boolean) : [],
                             ethicalNotes: fieldMapping.ethics ? csvRecord[fieldMapping.ethics]?.trim() : '',
                             biasNotes: fieldMapping.bias ? csvRecord[fieldMapping.bias]?.trim() : '',
                             observations: fieldMapping.notes ? csvRecord[fieldMapping.notes]?.trim() : '',
                             rating: fieldMapping.rating ? String(parseInt(csvRecord[fieldMapping.rating]?.trim()) || 0) : '0', // Asegurar que sea string 0-5
                             // Intentar mapear proyecto por nombre si existe columna
                             projectId: mapProjectId(fieldMapping.projectName ? csvRecord[fieldMapping.projectName]?.trim() : null),
                             // Usar fechas del CSV si existen y son válidas, si no, usar fecha actual
                             dateCreated: parseCsvDate(fieldMapping.dateCreated ? csvRecord[fieldMapping.dateCreated] : null) || new Date().toISOString(),
                             dateModified: parseCsvDate(fieldMapping.dateModified ? csvRecord[fieldMapping.dateModified] : null) || new Date().toISOString()
                         };
                         // Validar calificación esté en rango 0-5
                         const ratingInt = parseInt(newRecord.rating);
                         if (isNaN(ratingInt) || ratingInt < 0 || ratingInt > 5) {
                              newRecord.rating = '0';
                         }


                         newRecordsToAdd.push(newRecord);
                    });

                     console.log(`${newRecordsToAdd.length} registros nuevos para añadir.`);
                     if (skippedCount > 0) {
                          console.log(`${skippedCount} registros del CSV fueron omitidos porque su ID ya existía.`);
                     }


                     // Guardar los nuevos registros fusionados
                     if (newRecordsToAdd.length > 0) {
                          const allRecords = [...existingRecords, ...newRecordsToAdd];
                          if (saveToStorage('chatlog_records', allRecords)) {
                               // Actualizar la interfaz
                               console.log("Actualizando interfaz después de importación CSV...");
                               loadProjects(); // Puede que se hayan creado proyectos implícitamente
                               loadQuickAccessList();
                               updateAllTags();
                               preloadTabData();
                               if (document.getElementById('tools')?.classList.contains('active')) loadRecordsForManagement();
                               if (document.getElementById('stats')?.classList.contains('active')) loadStatistics();
                               if (document.getElementById('declaration')?.classList.contains('active')) loadRecordsForDeclaration();
                               updateStorageUsage();

                               let message = `Se han importado ${newRecordsToAdd.length} nuevos registros correctamente desde el CSV.`;
                               if (skippedCount > 0) {
                                    message += `\n(${skippedCount} registros fueron omitidos porque su ID ya existía).`;
                               }
                               alert(message);
                          } else {
                               alert("Error al guardar los registros importados desde CSV.");
                          }
                     } else {
                          alert("No se añadieron nuevos registros desde el CSV." + (skippedCount > 0 ? `\n(${skippedCount} registros fueron omitidos porque su ID ya existía).` : ''));
                     }


                    // Reiniciar el campo de archivo y botón/preview
                    fileInput.value = '';
                    document.getElementById('csv-preview-container').style.display = 'none';
                    document.getElementById('import-csv-btn').disabled = true;

                } catch (error) {
                    console.error('Error al importar CSV:', error);
                    alert('Error al importar el archivo CSV: ' + error.message);
                     fileInput.value = '';
                     document.getElementById('csv-preview-container').style.display = 'none';
                     document.getElementById('import-csv-btn').disabled = true;
                }
            };

            reader.onerror = function() {
                alert('Error al leer el archivo CSV.');
                 fileInput.value = '';
                 document.getElementById('csv-preview-container').style.display = 'none';
                 document.getElementById('import-csv-btn').disabled = true;
            };

            reader.readAsText(file); // Leer como texto
        }

         // Función auxiliar para mapear encabezados CSV a campos internos
         function mapCsvHeaders(headers) {
             const mapping = {};
             const mapConfig = {
                 id: ['id', 'id_registro', 'record_id'],
                 name: ['nombre', 'name', 'título', 'title', 'interaccion', 'interaction'],
                 purpose: ['finalidad', 'purpose', 'objetivo', 'goal'],
                 model: ['modelo', 'model', 'llm', 'nombre_llm'],
                 version: ['version', 'versión'],
                 prompt: ['prompt', 'consulta'],
                 link: ['link', 'enlace', 'url', 'liga'],
                 tags: ['tags', 'etiquetas', 'keywords', 'palabras_clave'],
                 ethics: ['etica', 'ethics', 'ethical', 'notas_eticas'],
                 bias: ['sesgo', 'bias', 'mitigacion', 'riesgos', 'notas_sesgo'],
                 notes: ['observaciones', 'observations', 'notas', 'notes', 'otras_observaciones'],
                 rating: ['calificacion', 'rating', 'puntuacion', 'score', 'estrellas', 'stars'],
                 projectName: ['proyecto', 'project', 'nombre_proyecto'],
                 dateCreated: ['fecha_creacion', 'date_created', 'created_at'],
                 dateModified: ['fecha_modificacion', 'date_modified', 'updated_at', 'fecha'] // 'fecha' como fallback para modificación
             };

             headers.forEach(header => {
                 const headerLower = header.toLowerCase().replace(/ /g, '_'); // Normalizar a minúsculas y guiones bajos
                 for (const internalField in mapConfig) {
                      if (!mapping[internalField]) { // Si aún no hemos mapeado este campo interno
                          if (mapConfig[internalField].some(term => headerLower.includes(term))) {
                               mapping[internalField] = header; // Guardar el nombre original del encabezado
                               break; // Pasar al siguiente encabezado
                          }
                      }
                 }
             });
              console.log("Mapeo de encabezados CSV:", mapping);
             return mapping;
         }

         // Función auxiliar para intentar parsear fechas de CSV (ISO o formatos comunes)
         function parseCsvDate(dateString) {
              if (!dateString) return null;
              try {
                   const date = new Date(dateString);
                   // Validar que la fecha parseada sea válida
                   if (!isNaN(date.getTime())) {
                        return date.toISOString(); // Devolver en formato ISO
                   }
                   // Podríamos añadir intentos con otros formatos si es necesario (ej. DD/MM/YYYY)
                   // const parts = dateString.match(/(\d{1,2})[\/.-](\d{1,2})[\/.-](\d{2,4})/);
                   // if (parts) { ... }
              } catch (e) { /* Ignorar error de parseo */ }
              return null; // Devolver null si no se pudo parsear
         }

         // Función auxiliar para encontrar o crear ID de proyecto por nombre
         function mapProjectId(projectName) {
              if (!projectName) return null;

              const projects = loadFromStorage('chatlog_projects') || [];
              const projectNameLower = projectName.toLowerCase();

              // Buscar proyecto existente por nombre (insensible a mayúsculas)
              const existingProject = projects.find(p => p.name.toLowerCase() === projectNameLower);
              if (existingProject) {
                   return existingProject.id;
              }

              // Si no existe, crear uno nuevo (opcional, podría asignarse a 'Sin proyecto')
              // --> Decidimos crearlo para mantener la información del CSV
              console.log(`Proyecto "${projectName}" no encontrado, creando uno nuevo...`);
              const newProject = {
                   id: Date.now().toString() + Math.random().toString(36).substring(2, 8),
                   name: projectName,
                   dateCreated: new Date().toISOString()
              };
              projects.push(newProject);
              if (saveToStorage('chatlog_projects', projects)) {
                   console.log(`Nuevo proyecto "${projectName}" creado con ID ${newProject.id} durante importación CSV.`);
                    // No es necesario llamar a loadProjects() aquí, se hará después de la importación.
                   return newProject.id;
              } else {
                   console.error(`Error al crear automáticamente el proyecto "${projectName}" desde CSV.`);
                   return null; // No asignar proyecto si falla la creación
              }
         }

         // Función auxiliar para escapar HTML (simple)
         function escapeHtml(unsafe) {
             if (unsafe === null || unsafe === undefined) return '';
             return String(unsafe)
                  .replace(/&/g, "&amp;")
                  .replace(/</g, "&lt;")
                  .replace(/>/g, "&gt;")
                  .replace(/"/g, "&quot;")
                  .replace(/'/g, "&#039;");
         }


        // Fin del script
    </script>
</body>
</html>
```
